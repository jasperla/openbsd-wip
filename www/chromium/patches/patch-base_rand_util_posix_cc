$OpenBSD$

Index: base/rand_util_posix.cc
--- base/rand_util_posix.cc.orig
+++ base/rand_util_posix.cc
@@ -21,7 +21,7 @@
 #include "third_party/lss/linux_syscall_support.h"
 #endif
 
-#if !defined(OS_IOS) && !defined(OS_NACL)
+#if !defined(OS_IOS) && !defined(OS_NACL) && !defined(OS_BSD)
 // TODO(crbug.com/995996): Waiting for this header to appear in the iOS SDK.
 // (See below.)
 #include <sys/random.h>
@@ -36,6 +36,7 @@ static constexpr int kOpenFlags = O_RDONLY;
 static constexpr int kOpenFlags = O_RDONLY | O_CLOEXEC;
 #endif
 
+#if !defined(OS_OPENBSD)
 // We keep the file descriptor for /dev/urandom around so we don't need to
 // reopen it (which is expensive), and since we may not even be able to reopen
 // it if we are later put in a sandbox. This class wraps the file descriptor so
@@ -53,6 +54,7 @@ class URandomFd {
  private:
   const int fd_;
 };
+#endif
 
 }  // namespace
 
@@ -64,6 +66,7 @@ namespace base {
 // (https://chromium-review.googlesource.com/c/chromium/src/+/1545096) and land
 // it or some form of it.
 void RandBytes(void* output, size_t output_length) {
+#if !defined(OS_OPENBSD)
 #if (defined(OS_LINUX) || defined(OS_CHROMEOS)) && !defined(OS_NACL)
   // We have to call `getrandom` via Linux Syscall Support, rather than through
   // the libc wrapper, because we might not have an up-to-date libc (e.g. on
@@ -95,11 +98,16 @@ void RandBytes(void* output, size_t output_length) {
   const bool success =
       ReadFromFD(urandom_fd, static_cast<char*>(output), output_length);
   CHECK(success);
+#else
+  arc4random_buf(static_cast<char*>(output), output_length);
+#endif
 }
 
+#if !defined(OS_OPENBSD)
 int GetUrandomFD() {
   static NoDestructor<URandomFd> urandom_fd;
   return urandom_fd->fd();
 }
+#endif
 
 }  // namespace base

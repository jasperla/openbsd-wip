$OpenBSD: patch-unix_uxnoise_c,v 1.1.1.1 2007/09/04 09:14:00 djm Exp $
--- unix/uxnoise.c.orig	Wed Sep 16 23:28:20 2009
+++ unix/uxnoise.c	Thu Mar 25 22:12:47 2010
@@ -21,7 +21,7 @@ static int read_dev_urandom(char *buf, int len)
     int fd;
     int ngot, ret;
 
-    fd = open("/dev/urandom", O_RDONLY);
+    fd = open("/dev/arandom", O_RDONLY);
     if (fd < 0)
 	return 0;
 
@@ -44,43 +44,20 @@ static int read_dev_urandom(char *buf, int len)
  * This function is called once, at PuTTY startup. It will do some
  * slightly silly things such as fetching an entire process listing
  * and scanning /tmp, load the saved random seed from disk, and
- * also read 32 bytes out of /dev/urandom.
+ * also read 32 bytes out of /dev/arandom.
  */
 
 void noise_get_heavy(void (*func) (void *, int))
 {
-    char buf[512];
-    FILE *fp;
-    int ret;
-    int got_dev_urandom = 0;
+    char buf[32];
 
-    if (read_dev_urandom(buf, 32)) {
-	got_dev_urandom = 1;
-	func(buf, 32);
-    }
-
-    fp = popen("ps -axu 2>/dev/null", "r");
-    if (fp) {
-	while ( (ret = fread(buf, 1, sizeof(buf), fp)) > 0)
-	    func(buf, ret);
-	pclose(fp);
-    } else if (!got_dev_urandom) {
-	fprintf(stderr, "popen: %s\n"
-		"Unable to access fallback entropy source\n", strerror(errno));
+    if (read_dev_urandom(buf, sizeof(buf))) {
+	func(buf, sizeof(buf));
+    } else {
+	fprintf(stderr, "read_dev_urandom: Unable to access entropy source\n");
 	exit(1);
     }
 
-    fp = popen("ls -al /tmp 2>/dev/null", "r");
-    if (fp) {
-	while ( (ret = fread(buf, 1, sizeof(buf), fp)) > 0)
-	    func(buf, ret);
-	pclose(fp);
-    } else if (!got_dev_urandom) {
-	fprintf(stderr, "popen: %s\n"
-		"Unable to access fallback entropy source\n", strerror(errno));
-	exit(1);
-    }
-
     read_random_seed(func);
     random_save_seed();
 }
@@ -114,21 +91,13 @@ void noise_get_light(void (*func) (void *, int))
  */
 void noise_regular(void)
 {
-    int fd;
-    int ret;
-    char buf[512];
+    u_int32_t buf[8], i;
     struct rusage rusage;
 
-    if ((fd = open("/proc/meminfo", O_RDONLY)) >= 0) {
-	while ( (ret = read(fd, buf, sizeof(buf))) > 0)
-	    random_add_noise(buf, ret);
-	close(fd);
-    }
-    if ((fd = open("/proc/stat", O_RDONLY)) >= 0) {
-	while ( (ret = read(fd, buf, sizeof(buf))) > 0)
-	    random_add_noise(buf, ret);
-	close(fd);
-    }
+    for (i = 0; i < 8; i++)
+        buf[i] = arc4random();
+    random_add_noise(buf, sizeof(buf));
+
     getrusage(RUSAGE_SELF, &rusage);
     random_add_noise(&rusage, sizeof(rusage));
 }
@@ -141,6 +110,9 @@ void noise_regular(void)
 void noise_ultralight(unsigned long data)
 {
     struct timeval tv;
+    u_int32_t r;
+    r = arc4random();
+    random_add_noise(&r, sizeof(r));
     gettimeofday(&tv, NULL);
     random_add_noise(&tv, sizeof(tv));
     random_add_noise(&data, sizeof(data));

$OpenBSD$
Add *BSD support.

Note: wrapping fcntl() on OpenBSD isn't possible, so tests will fail.
--- tests/os-wrappers-test.c.orig	Mon Jul  6 22:38:51 2015
+++ tests/os-wrappers-test.c	Sat Mar 26 19:26:32 2016
@@ -26,6 +26,7 @@
 
 #define _GNU_SOURCE
 
+#include <err.h>
 #include <stdlib.h>
 #include <assert.h>
 #include <sys/types.h>
@@ -37,7 +38,11 @@
 #include <stdarg.h>
 #include <fcntl.h>
 #include <stdio.h>
-#include <sys/epoll.h>
+#ifdef HAVE_SYS_EPOLL_H
+# include <sys/epoll.h>
+#else
+# include <sys/event.h>
+#endif
 
 #include "wayland-private.h"
 #include "test-runner.h"
@@ -54,9 +59,16 @@ static int wrapped_calls_fcntl;
 static ssize_t (*real_recvmsg)(int, struct msghdr *, int);
 static int wrapped_calls_recvmsg;
 
+#ifdef HAVE_SYS_EPOLL_H
 static int (*real_epoll_create1)(int);
 static int wrapped_calls_epoll_create1;
+#endif
 
+#if HAVE_SYS_EVENT_H
+static int (*real_kqueue)(void);
+static int wrapped_calls_kqueue;
+#endif
+
 static void
 init_fallbacks(int do_fallbacks)
 {
@@ -64,7 +76,12 @@ init_fallbacks(int do_fallbacks)
 	real_socket = dlsym(RTLD_NEXT, "socket");
 	real_fcntl = dlsym(RTLD_NEXT, "fcntl");
 	real_recvmsg = dlsym(RTLD_NEXT, "recvmsg");
+#ifdef HAVE_SYS_EPOLL_H
 	real_epoll_create1 = dlsym(RTLD_NEXT, "epoll_create1");
+#endif
+#ifdef HAVE_SYS_EVENT_H
+	real_kqueue = dlsym(RTLD_NEXT, "kqueue");
+#endif
 }
 
 __attribute__ ((visibility("default"))) int
@@ -80,6 +97,8 @@ socket(int domain, int type, int protocol)
 	return real_socket(domain, type, protocol);
 }
 
+/* won't work on OpenBSD, since real fcntl have to be called early */
+#if !defined(__OpenBSD__)
 __attribute__ ((visibility("default"))) int
 fcntl(int fd, int cmd, ...)
 {
@@ -99,6 +118,7 @@ fcntl(int fd, int cmd, ...)
 
 	return real_fcntl(fd, cmd, arg);
 }
+#endif
 
 __attribute__ ((visibility("default"))) ssize_t
 recvmsg(int sockfd, struct msghdr *msg, int flags)
@@ -113,6 +133,7 @@ recvmsg(int sockfd, struct msghdr *msg, int flags)
 	return real_recvmsg(sockfd, msg, flags);
 }
 
+#ifdef HAVE_SYS_EPOLL_H
 __attribute__ ((visibility("default"))) int
 epoll_create1(int flags)
 {
@@ -126,7 +147,24 @@ epoll_create1(int flags)
 
 	return real_epoll_create1(flags);
 }
+#endif
 
+#ifdef HAVE_SYS_EVENT_H
+__attribute__ ((visibility("default"))) int
+kqueue(void)
+{
+	wrapped_calls_kqueue++;
+
+	if (fall_back) {
+		wrapped_calls_kqueue++; /* kqueue() not wrapped */
+		errno = EINVAL;
+		return -1;
+	}
+
+	return real_kqueue();
+}
+#endif
+
 static void
 do_os_wrappers_socket_cloexec(int n)
 {
@@ -183,6 +221,7 @@ do_os_wrappers_dupfd_cloexec(int n)
 	 * Must have 4 calls if falling back, but must also allow
 	 * falling back without a forced fallback.
 	 */
+	warnx("wrapped_calls_fcntl is %d, should be larger than %d", wrapped_calls_fcntl, n);
 	assert(wrapped_calls_fcntl > n);
 
 	exec_fd_leak_check(nr_fds);
@@ -334,14 +373,14 @@ TEST(os_wrappers_recvmsg_cloexec_fallback)
 }
 
 static void
-do_os_wrappers_epoll_create_cloexec(int n)
+do_os_wrappers_queue_create_cloexec(int n)
 {
 	int fd;
 	int nr_fds;
 
 	nr_fds = count_open_fds();
 
-	fd = wl_os_epoll_create_cloexec();
+	fd = wl_os_queue_create_cloexec();
 	assert(fd >= 0);
 
 #ifdef EPOLL_CLOEXEC
@@ -353,16 +392,18 @@ do_os_wrappers_epoll_create_cloexec(int n)
 	exec_fd_leak_check(nr_fds);
 }
 
-TEST(os_wrappers_epoll_create_cloexec)
+TEST(os_wrappers_queue_create_cloexec)
 {
 	init_fallbacks(0);
-	do_os_wrappers_epoll_create_cloexec(1);
+	do_os_wrappers_queue_create_cloexec(1);
 }
 
-TEST(os_wrappers_epoll_create_cloexec_fallback)
+TEST(os_wrappers_queue_create_cloexec_fallback)
 {
 	init_fallbacks(1);
-	do_os_wrappers_epoll_create_cloexec(2);
+	do_os_wrappers_queue_create_cloexec(2);
 }
 
 /* FIXME: add tests for wl_os_accept_cloexec() */
+
+/* FIXME: add tests for kqueue() */

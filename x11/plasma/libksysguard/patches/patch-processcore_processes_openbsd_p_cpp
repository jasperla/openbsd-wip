$OpenBSD$
Unbreak and rework OpenBSD support, using libkvm.
--- processcore/processes_openbsd_p.cpp.orig	Tue Dec 22 13:38:11 2015
+++ processcore/processes_openbsd_p.cpp	Tue Jan  5 23:14:31 2016
@@ -17,27 +17,22 @@
     Boston, MA 02110-1301, USA.
 */
 
-#include "processes_local_p.h"
-#include "process.h"
-
-#include <KLocalizedString>
-
-#include <QSet>
-
 #include <sys/param.h>
+#include <sys/proc.h>
 #include <sys/sysctl.h>
-#include <sys/types.h>
-#include <sys/user.h>
-#include <sys/resource.h>
-#if defined(__DragonFly__)
-#include <sys/resourcevar.h>
-#include <err.h>
-#endif
+
+#include <fcntl.h>
+#include <kvm.h>
 #include <signal.h>
-#include <unistd.h>
 #include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
 
+#include <QSet>
+#include <KLocalizedString>
 
+#include "processes_local_p.h"
+#include "process.h"
 
 
 namespace KSysGuard
@@ -45,96 +40,85 @@ namespace KSysGuard
 
   class ProcessesLocal::Private
   {
+    private:
+      kvm_t *kd;
+
     public:
-      Private() {;}
-      ~Private() {;}
-      inline bool readProc(long pid, struct kinfo_proc *p);
-      inline void readProcStatus(struct kinfo_proc *p, Process *process);
-      inline void readProcStat(struct kinfo_proc *p, Process *process);
-      inline void readProcStatm(struct kinfo_proc *p, Process *process);
-      inline bool readProcCmdline(long pid, Process *process);
-    };
+      Private();
+      ~Private();
+      QSet<long> getAllPids();
+      struct kinfo_proc* readProc(long pid);
+      void readProcStatus(const struct kinfo_proc *p, Process *process);
+      void readProcStat(const struct kinfo_proc *p, Process *process);
+      void readProcStatm(const struct kinfo_proc *p, Process *process);
+      void readProcCmdline(const struct kinfo_proc *p, Process *process);
+  };
 
-bool ProcessesLocal::Private::readProc(long pid, struct kinfo_proc *p)
+ProcessesLocal::Private::Private()
 {
-    int mib[4];
-    size_t len;
+    kd = kvm_open(NULL, NULL, NULL, KVM_NO_FILES, NULL);
+}
 
-    mib[0] = CTL_KERN;
-    mib[1] = KERN_PROC;
-    mib[2] = KERN_PROC_PID;
-    mib[3] = pid;
+ProcessesLocal::Private::~Private()
+{
+    kvm_close(kd);
+}
 
-    len = sizeof (struct kinfo_proc);
-    if (sysctl(mib, 4, p, &len, NULL, 0) == -1 || !len)
-        return false;
-    return true;
+QSet<long> ProcessesLocal::Private::getAllPids()
+{
+    QSet<long> pids;
+    int cnt;
+    struct kinfo_proc* kip = kvm_getprocs(kd, KERN_PROC_ALL, 0,
+      sizeof(struct kinfo_proc), &cnt);
+    if (kip != NULL)
+    {
+        while (cnt--)
+        {
+            pids.insert(kip[cnt].p_pid);
+        }
+    }
+    return pids;
 }
 
-void ProcessesLocal::Private::readProcStatus(struct kinfo_proc *p, Process *process)
+struct kinfo_proc* ProcessesLocal::Private::readProc(long pid)
 {
-    process->setUid(0);
-    process->setGid(0);
-    process->setTracerpid(-1);
+    int cnt;
+    struct kinfo_proc* kip = kvm_getprocs(kd, KERN_PROC_PID, (int)pid,
+      sizeof(struct kinfo_proc), &cnt);
+    if (cnt == 0)
+        return NULL;
+    return kip;
+}
 
-
-#if defined(__FreeBSD__) && __FreeBSD_version >= 500015
-    process->setUid(p->ki_uid);
-    process->setGid(p->ki_pgid);
-    process->setName(QString(p->ki_comm ? p->ki_comm : "????"));
-#elif defined(__DragonFly__) && __DragonFly_version >= 190000
-    process->setUid(p->kp_uid);
-    process->setGid(p->kp_pgid);
-    process->setName(QString(p->kp_comm ? p->kp_comm : "????"));
-#else
-    process->setUid(p->kp_eproc.e_ucred.cr_uid);
-    process->setGid(p->kp_eproc.e_pgid);
-#endif
+void ProcessesLocal::Private::readProcStatus(const struct kinfo_proc *p, Process *process)
+{
+    process->setTracerpid(-1);    // OpenBSD doesn't provide such info
+    process->setUid(p->p_uid);
+    process->setGid(p->p_gid);
+    process->setName(QString::fromLocal8Bit(p->p_comm));
 }
 
-void ProcessesLocal::Private::readProcStat(struct kinfo_proc *p, Process *ps)
+void ProcessesLocal::Private::readProcStat(const struct kinfo_proc *p, Process *ps)
 {
-    int status;
-    struct rusage pru;
-#if defined(__FreeBSD__) && __FreeBSD_version >= 500015
-        ps->setUserTime(p->ki_runtime / 10000);
-        ps->setNiceLevel(p->ki_nice);
-        ps->setVmSize(p->ki_size);
-        ps->setVmRSS(p->ki_rssize * getpagesize());
-        status = p->ki_stat;
-#elif defined(__DragonFly__) && __DragonFly_version >= 190000
-        if (!getrusage(p->kp_pid, &pru)) {
-            errx(1, "failed to get rusage info");
-        }
-        ps->setUserTime(pru.ru_utime.tv_usec / 1000); /*p_runtime / 1000*/
-        ps->setNiceLevel(p->kp_nice);
-        ps->setVmSize(p->kp_vm_map_size);
-        ps->setVmRSS(p->kp_vm_rssize * getpagesize());
-        status = p->kp_stat;
-#else
-        ps->setUserTime(p->kp_proc.p_rtime.tv_sec*100+p->kp_proc.p_rtime.tv_usec/100);
-        ps->setNiceLevel(p->kp_proc.p_nice);
-        ps->setVmSize(p->kp_eproc.e_vm.vm_map.size);
-        ps->setVmRSS(p->kp_eproc.e_vm.vm_rssize * getpagesize());
-        status = p->kp_proc.p_stat;
-#endif
-        ps->setSysTime(0);
+    ps->setUserTime(p->p_uutime_sec*100+p->p_uutime_usec/100);
+    ps->setSysTime(p->p_ustime_sec*100+p->p_ustime_usec/100);
+    ps->setNiceLevel(p->p_nice);
+    ps->setVmSize(p->p_vm_map_size);
+    ps->setVmRSS(p->p_vm_rssize * getpagesize());
 
-// "idle","run","sleep","stop","zombie"
-    switch( status ) {
-      case '0':
-        ps->setStatus(Process::DiskSleep);
-	break;
-      case '1':
+    switch(p->p_stat) {
+      case SIDL:
+      case SRUN:
+      case SONPROC:
         ps->setStatus(Process::Running);
 	break;
-      case '2':
+      case SSLEEP:
         ps->setStatus(Process::Sleeping);
 	break;
-      case '3':
+      case SSTOP:
         ps->setStatus(Process::Stopped);
 	break;
-      case '4':
+      case SDEAD:
          ps->setStatus(Process::Zombie);
          break;
       default:
@@ -143,7 +127,7 @@ void ProcessesLocal::Private::readProcStat(struct kinf
     }
 }
 
-void ProcessesLocal::Private::readProcStatm(struct kinfo_proc *p, Process *process)
+void ProcessesLocal::Private::readProcStatm(const struct kinfo_proc *p, Process *process)
 {
 // TODO
 
@@ -151,27 +135,26 @@ void ProcessesLocal::Private::readProcStatm(struct kin
 //     process->setVmURSS(process->vmRSS - (shared * sysconf(_SC_PAGESIZE) / 1024));
 }
 
-bool ProcessesLocal::Private::readProcCmdline(long pid, Process *process)
+void ProcessesLocal::Private::readProcCmdline(const struct kinfo_proc *p, Process *process)
 {
-    int mib[4];
-    struct kinfo_proc p;
-    size_t buflen = 256;
-    char buf[256];
+    const int maxlen = 0x7fff;    // arbitrary choosen as a reasonable value
+    char **argv;
 
-    mib[0] = CTL_KERN;
-    mib[1] = KERN_PROC;
-    mib[2] = KERN_PROC_ARGS;
-    mib[3] = pid;
-
-    if (sysctl(mib, 4, buf, &buflen, NULL, 0) == -1 || !buflen)
-        return false;
-    QString command = QString(buf);
-
-    //cmdline seperates parameters with the NULL character
-    command.replace('\0', ' ');
-    process->setCommand(command.trimmed());
-
-    return true;
+    argv = kvm_getargv(kd, p, maxlen);
+    if (argv)
+    {
+        char buf[maxlen];
+        for (buf[0] = '\0'; *argv != NULL; argv++)
+        {
+            if (buf[0] != '\0')
+                strlcat(buf, " ", sizeof(buf));
+            strlcat(buf, *argv, sizeof(buf));
+        }
+    }
+    else
+    {
+        process->setCommand(QString::fromLocal8Bit(p->p_comm));
+    }
 }
 
 ProcessesLocal::ProcessesLocal() : d(new Private())
@@ -181,58 +164,30 @@ ProcessesLocal::ProcessesLocal() : d(new Private())
 
 long ProcessesLocal::getParentPid(long pid) {
     Q_ASSERT(pid != 0);
-    long long ppid = -1;
-    struct kinfo_proc p;
-    if(d->readProc(pid, &p))
-    {
-#if defined(__FreeBSD__) && __FreeBSD_version >= 500015
-        ppid = p.ki_ppid;
-#elif defined(__DragonFly__) && __DragonFly_version >= 190000
-        ppid = p.kp_ppid;
-#else
-        ppid = p.kp_eproc.e_ppid;
-#endif
-    }
+    long ppid = -1;
+    struct kinfo_proc *kip = d->readProc(pid);
+    if (kip != NULL)
+        ppid = kip->p_ppid;
     return ppid;
 }
 
 bool ProcessesLocal::updateProcessInfo( long pid, Process *process)
 {
-    struct kinfo_proc p;
-    if(!d->readProc(pid, &p)) return false;
-    d->readProcStat(&p, process);
-    d->readProcStatus(&p, process);
-    d->readProcStatm(&p, process);
-    if(!d->readProcCmdline(pid, process)) return false;
+    struct kinfo_proc *kip;
 
+    if ((kip = d->readProc(pid)) == NULL)
+        return false;
+    d->readProcStat(kip, process);
+    d->readProcStatus(kip, process);
+    d->readProcStatm(kip, process);
+    d->readProcCmdline(kip, process);
+
     return true;
 }
 
 QSet<long> ProcessesLocal::getAllPids( )
 {
-    QSet<long> pids;
-    int mib[3];
-    size_t len;
-    size_t num;
-    struct kinfo_proc *p;
-
-    mib[0] = CTL_KERN;
-    mib[1] = KERN_PROC;
-    mib[2] = KERN_PROC_ALL;
-    sysctl(mib, 3, NULL, &len, NULL, 0);
-    p = (kinfo_proc *) malloc(len);
-    sysctl(mib, 3, p, &len, NULL, 0);
-
-    for (num = 0; num < len / sizeof(struct kinfo_proc); num++)
-#if defined(__FreeBSD__) && __FreeBSD_version >= 500015
-        pids.insert(p[num].ki_pid);
-#elif defined(__DragonFly__) && __DragonFly_version >= 190000
-        pids.insert(p[num].kp_pid);
-#else
-        pids.insert(p[num].kp_proc.p_pid);
-#endif
-    free(p);
-    return pids;
+    return d->getAllPids();
 }
 
 bool ProcessesLocal::sendSignal(long pid, int sig) {
@@ -253,10 +208,7 @@ bool ProcessesLocal::setNiceness(long pid, int priorit
 
 bool ProcessesLocal::setScheduler(long pid, int priorityClass, int priority)
 {
-    if(priorityClass == KSysGuard::Process::Other || priorityClass == KSysGuard::Process::Batch)
-	    priority = 0;
-    if(pid <= 0) return false; // check the parameters
-	    return false;
+    return true;  // OpenBSD doesn't support different schedulers
 }
 
 bool ProcessesLocal::setIoNiceness(long pid, int priorityClass, int priority) {
@@ -284,20 +236,6 @@ long long ProcessesLocal::totalPhysicalMemory() {
     return Total /= 1024;
 }
 
-long int KSysGuard::ProcessesLocal::numberProcessorCores()
-{
-    int mib[2];
-    int ncpu;
-    size_t len;
-
-    mib[0] = CTL_HW;
-    mib[1] = HW_NCPU;
-    len = sizeof(ncpu);
-
-    if (sysctl(mib, 2, &ncpu, &len, NULL, 0) == -1 || !len)
-        return 1;
-    return len;
-}
 ProcessesLocal::~ProcessesLocal()
 {
    delete d;

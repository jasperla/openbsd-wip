$OpenBSD$

work around procfs
hardcode ${PREFIX}/bin for "cwd_of_process()"
DEBUG: show pid

Index: kitty/child.py
--- kitty/child.py.orig
+++ kitty/child.py
@@ -40,16 +40,20 @@ if is_macos:
 else:
 
     def cmdline_of_process(pid: int) -> List[str]:
-        with open('/proc/{}/cmdline'.format(pid), 'rb') as f:
-            return list(filter(None, f.read().decode('utf-8').split('\0')))
+        #with open('/proc/{}/cmdline'.format(pid), 'rb') as f:
+            #return list(filter(None, f.read().decode('utf-8').split('\0')))
+        return list( [ 'kitty' ] )
 
     def cwd_of_process(pid: int) -> str:
-        ans = '/proc/{}/cwd'.format(pid)
-        return os.path.realpath(ans)
+        print(pid)
+        #ans = '/proc/{}/cwd'.format(pid)
+        #return os.path.realpath(ans)
+        return "${PREFIX}/bin"
 
     def _environ_of_process(pid: int) -> str:
-        with open('/proc/{}/environ'.format(pid), 'rb') as f:
-            return f.read().decode('utf-8')
+        #with open('/proc/{}/environ'.format(pid), 'rb') as f:
+            #return f.read().decode('utf-8')
+        return ""
 
     def process_group_map() -> DefaultDict[int, List[int]]:
         ans: DefaultDict[int, List[int]] = defaultdict(list)

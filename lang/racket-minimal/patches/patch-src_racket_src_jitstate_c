$OpenBSD$

"avoid some C undefined behavior"
https://github.com/racket/racket/commit/9a8fd29

--- src/racket/src/jitstate.c.orig	Thu Jan 14 18:11:20 2016
+++ src/racket/src/jitstate.c	Tue Feb  9 23:13:12 2016
@@ -502,7 +502,7 @@ void scheme_extra_pushed(mz_jit_state *jitter, int n) 
   }
   v = (jitter->mappings[jitter->num_mappings]) >> 2;
   v += n;
-  jitter->mappings[jitter->num_mappings] = ((v << 2) | 0x1);
+  jitter->mappings[jitter->num_mappings] = (((unsigned)v << 2) | 0x1);
 }
 
 void scheme_mz_pushr_p_it(mz_jit_state *jitter, int reg) 
@@ -534,7 +534,7 @@ void scheme_extra_popped(mz_jit_state *jitter, int n)
   if (!v)
     --jitter->num_mappings;
   else
-    jitter->mappings[jitter->num_mappings] = ((v << 2) | 0x1);
+    jitter->mappings[jitter->num_mappings] = (((unsigned)v << 2) | 0x1);
 }
 
 void scheme_mz_popr_p_it(mz_jit_state *jitter, int reg, int discard) 
@@ -570,7 +570,7 @@ void scheme_mz_runstack_skipped(mz_jit_state *jitter, 
   v = (jitter->mappings[jitter->num_mappings]) >> 2;
   JIT_ASSERT(v <= 0);
   v -= n;
-  jitter->mappings[jitter->num_mappings] = ((v << 2) | 0x1);
+  jitter->mappings[jitter->num_mappings] = (((unsigned)v << 2) | 0x1);
   jitter->self_pos += n;
 }
 
@@ -589,7 +589,7 @@ void scheme_mz_runstack_unskipped(mz_jit_state *jitter
   if (!v)
     --jitter->num_mappings;
   else
-    jitter->mappings[jitter->num_mappings] = ((v << 2) | 0x1);
+    jitter->mappings[jitter->num_mappings] = (((unsigned)v << 2) | 0x1);
   jitter->self_pos -= n;
 }
 
@@ -603,7 +603,7 @@ void scheme_mz_runstack_pushed(mz_jit_state *jitter, i
       || (jitter->mappings[jitter->num_mappings] & 0x3)) {
     new_mapping(jitter);
   }
-  jitter->mappings[jitter->num_mappings] += (n << 2);
+  jitter->mappings[jitter->num_mappings] += ((unsigned)n << 2);
   jitter->need_set_rs = 1;
 }
 
@@ -614,7 +614,7 @@ void scheme_mz_runstack_closure_pushed(mz_jit_state *j
     jitter->max_depth = jitter->depth;
   jitter->self_pos += 1;
   new_mapping(jitter);
-  jitter->mappings[jitter->num_mappings] = (a << 4) | (flags << 2) | 0x2;
+  jitter->mappings[jitter->num_mappings] = ((unsigned)a << 4) | ((unsigned)flags << 2) | 0x2;
   jitter->need_set_rs = 1;
   /* closures are never popped; they go away due to returns or tail calls */
 }
@@ -627,7 +627,7 @@ void scheme_mz_runstack_flonum_pushed(mz_jit_state *ji
     jitter->max_depth = jitter->depth;
   jitter->self_pos += 1;
   new_mapping(jitter);
-  jitter->mappings[jitter->num_mappings] = (pos << 2) | 0x3;
+  jitter->mappings[jitter->num_mappings] = ((unsigned)pos << 2) | 0x3;
   jitter->need_set_rs = 1;
   /* flonums are never popped; they go away due to returns or tail calls */
 }
@@ -651,7 +651,7 @@ void scheme_mz_runstack_popped(mz_jit_state *jitter, i
   if (!v)
     --jitter->num_mappings;
   else
-    jitter->mappings[jitter->num_mappings] = (v << 2);
+    jitter->mappings[jitter->num_mappings] = ((unsigned)v << 2);
   jitter->need_set_rs = 1;
 }
 

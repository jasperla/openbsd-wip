$OpenBSD$

"avoid some C undefined behavior"
https://github.com/racket/racket/commit/9a8fd29

"fix internal array size on module redeclaration"
https://github.com/racket/racket/commit/35acfab

--- src/racket/src/module.c.orig	Thu Jan 14 18:11:20 2016
+++ src/racket/src/module.c	Wed Feb 10 00:04:46 2016
@@ -2249,10 +2249,12 @@ static Scheme_Object *do_namespace_attach_module(const
     }
     
     past_checkeds = SCHEME_CDR(past_checkeds);
-    from_modchain = SCHEME_VEC_ELS(from_modchain)[2];
-    if (phase > orig_phase)
-      to_modchain = SCHEME_VEC_ELS(to_modchain)[2];   
-    --phase;
+    if (!SCHEME_NULLP(past_checkeds)) {
+      from_modchain = SCHEME_VEC_ELS(from_modchain)[2];
+      if (phase > orig_phase)
+        to_modchain = SCHEME_VEC_ELS(to_modchain)[2];
+      --phase;
+    }
   }
 
   /* Notify module name resolver of attached modules: */
@@ -4959,7 +4961,7 @@ static void unlock_registry(Scheme_Env *env)
 
 XFORM_NONGCING static intptr_t make_key(int base_phase, int eval_exp, int eval_run)
 {
-  return ((base_phase << 3) 
+  return (((unsigned)base_phase << 3) 
           | (eval_exp ? ((eval_exp > 0) ? 2 : 4) : 0) 
           | (eval_run ? 1 : 0));
 }
@@ -5432,6 +5434,12 @@ static Scheme_Env *instantiate_module(Scheme_Module *m
       menv->link_midx = syntax_idx;
     } else {
       Scheme_Env *env2;
+
+      if (menv->module->num_phases < m->num_phases) {
+        char *running;
+        running = (char *)scheme_malloc_atomic(m->num_phases);
+        menv->running = running;
+      }
 
       menv->module = m;
       memset(menv->running, 0, menv->module->num_phases);

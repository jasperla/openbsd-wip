$OpenBSD$

"avoid some C undefined behavior"
https://github.com/racket/racket/commit/9a8fd29

--- src/racket/src/jitarith.c.orig	Thu Jan 14 18:11:20 2016
+++ src/racket/src/jitarith.c	Tue Feb  9 23:13:12 2016
@@ -1640,7 +1640,7 @@ int scheme_generate_arith_for(mz_jit_state *jitter, Sc
               __START_INNER_TINY__(branch_short);
               /* watch out for negation of most negative fixnum,
                  which is a positive number too big for a fixnum */
-              refz = jit_beqi_p(jit_forward(), JIT_R0, (void *)(((intptr_t)1 << ((8 * JIT_WORD_SIZE) - 2))));
+              refz = jit_beqi_p(jit_forward(), JIT_R0, (void *)(((uintptr_t)1 << ((8 * JIT_WORD_SIZE) - 2))));
               __END_INNER_TINY__(branch_short);
               if (reversed)
                 jit_mulr_l(JIT_R2, JIT_R0, JIT_R2);
@@ -1678,12 +1678,12 @@ int scheme_generate_arith_for(mz_jit_state *jitter, Sc
               if (!unsafe_fx || overflow_refslow) {
                 GC_CAN_IGNORE jit_insn *refx;
                 __START_INNER_TINY__(branch_short);
-                refx = jit_bnei_p(jit_forward(), JIT_R0, (void *)(((intptr_t)1 << ((8 * JIT_WORD_SIZE) - 2))));
+                refx = jit_bnei_p(jit_forward(), JIT_R0, (void *)(((uintptr_t)1 << ((8 * JIT_WORD_SIZE) - 2))));
                 __END_INNER_TINY__(branch_short);
                 /* first argument must have been most negative fixnum, 
                    second argument must have been -1: */
                 if (reversed)
-                  (void)jit_movi_p(JIT_R0, (void *)(((intptr_t)1 << ((8 * JIT_WORD_SIZE) - 1)) | 0x1));
+                  (void)jit_movi_p(JIT_R0, (void *)(((uintptr_t)1 << ((8 * JIT_WORD_SIZE) - 1)) | 0x1));
                 else
                   (void)jit_movi_p(JIT_R0, scheme_make_integer(-1));
                 (void)jit_jmpi(refslow);
@@ -1800,10 +1800,10 @@ int scheme_generate_arith_for(mz_jit_state *jitter, Sc
           /* Non-constant arg is in JIT_R0 */
           if (arith == ARITH_ADD) {
             if (unsafe_fx && !overflow_refslow)
-              jit_addi_l(dest, JIT_R0, v << 1);
+              jit_addi_l(dest, JIT_R0, (uintptr_t)v << 1);
             else {
               jit_movr_p(JIT_R2, JIT_R0);
-              (void)jit_boaddi_l(refslow, JIT_R2, v << 1);
+              (void)jit_boaddi_l(refslow, JIT_R2, (uintptr_t)v << 1);
               jit_movr_p(dest, JIT_R2);
             }
           } else if (arith == ARITH_SUB) {
@@ -1816,10 +1816,10 @@ int scheme_generate_arith_for(mz_jit_state *jitter, Sc
               jit_addi_ul(dest, JIT_R2, 0x1);
             } else {
               if (unsafe_fx && !overflow_refslow)
-                jit_subi_l(dest, JIT_R0, v << 1);
+                jit_subi_l(dest, JIT_R0, (uintptr_t)v << 1);
               else {
                 jit_movr_p(JIT_R2, JIT_R0);
-                (void)jit_bosubi_l(refslow, JIT_R2, v << 1);
+                (void)jit_bosubi_l(refslow, JIT_R2, (uintptr_t)v << 1);
                 jit_movr_p(dest, JIT_R2);
               }
             }
@@ -1851,7 +1851,7 @@ int scheme_generate_arith_for(mz_jit_state *jitter, Sc
               jit_ori_ul(dest, JIT_R0, l);
             } else if (arith == ARITH_XOR) {
               /* xor */
-              jit_xori_ul(dest, JIT_R0, v << 1);
+              jit_xori_ul(dest, JIT_R0, (uintptr_t)v << 1);
             } else if ((arith == ARITH_LSH) || (arith == ARITH_RSH)) {
               /* arithmetic-shift */
               /* We only get here when v is between -MAX_TRY_SHIFT and MAX_TRY_SHIFT, inclusive */
@@ -1902,7 +1902,7 @@ int scheme_generate_arith_for(mz_jit_state *jitter, Sc
               __END_INNER_TINY__(branch_short);
               /* watch out for most negative fixnum! */
               if (!unsafe_fx || overflow_refslow)
-                (void)jit_beqi_p(refslow, JIT_R0, (void *)(((intptr_t)1 << ((8 * JIT_WORD_SIZE) - 1)) | 0x1));
+                (void)jit_beqi_p(refslow, JIT_R0, (void *)(((uintptr_t)1 << ((8 * JIT_WORD_SIZE) - 1)) | 0x1));
               (void)jit_movi_p(JIT_R1, scheme_make_integer(0));
               jit_subr_l(JIT_R0, JIT_R1, JIT_R0);
               jit_ori_l(JIT_R0, JIT_R0, 0x1);
@@ -2040,7 +2040,7 @@ int scheme_generate_arith_for(mz_jit_state *jitter, Sc
             jit_lshr_l(JIT_R0, JIT_V1, JIT_R0);
             ref3 = jit_bmcr_l(jit_forward(), JIT_R1, JIT_R0);
           } else {
-            ref3 = jit_bmci_l(jit_forward(), JIT_R0, 1 << (v+1));
+            ref3 = jit_bmci_l(jit_forward(), JIT_R0, (uintptr_t)1 << (v+1));
             rs_can_keep = 1;
           }
           break;

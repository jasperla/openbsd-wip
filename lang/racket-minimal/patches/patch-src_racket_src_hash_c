$OpenBSD$

"avoid some C undefined behavior"
https://github.com/racket/racket/commit/9a8fd29

"fix a problem with 'hash-remove'"
https://github.com/racket/racket/commit/9494216a9bd4431

--- src/racket/src/hash.c.orig	Thu Jan 14 18:11:20 2016
+++ src/racket/src/hash.c	Sun Feb 28 00:21:23 2016
@@ -1387,9 +1387,10 @@ XFORM_NONGCING static uintptr_t fast_equal_hash_key(Sc
       if (!(MZ_OPT_HASH_KEY(&s->iso) & 0x1)) {
 	/* Interned. Make key depend only on the content. */
 	if (!(MZ_OPT_HASH_KEY(&s->iso) & 0xFFFC)) {
-	  int i, h = 0;
+	  int i;
+          unsigned int h = 0;
 	  for (i = s->len; i--; ) {
-	    h += (h << 5) + h + s->s[i];
+	    h += (h << 5) + h + (unsigned int)s->s[i];
 	  }
 	  h += (h << 2);
 	  if (!(((short)h) & 0xFFFC))
@@ -2617,7 +2618,9 @@ static Scheme_Hash_Tree *hamt_remove(Scheme_Hash_Tree 
           return hamt_contract(ht, popcount, index, pos);
         ht = hamt_dup(ht, popcount);
         ht->count -= 1;
-        if ((sub_ht->count == 1) && !HASHTR_SUBTREEP(sub_ht->els[0])) {
+        if (((sub_ht->count == 1) && !HASHTR_SUBTREEP(sub_ht->els[0]))
+            || (HASHTR_COLLISIONP(sub_ht->els[0])
+                && (sub_ht->count == ((Scheme_Hash_Tree *)sub_ht->els[0])->count))) {
           /* drop extra layer that has 1 immediate entry */
           ht->els[pos] = sub_ht->els[0];
           if (SCHEME_HASHTR_FLAGS(ht) & HASHTR_HAS_VAL) {
@@ -2759,7 +2762,7 @@ XFORM_NONGCING static uintptr_t hamt_find_free_code(Sc
   Scheme_Hash_Tree *subtree;
   
   for (i = 0; i < mzHAMT_WORD_SIZE; i++) {
-    if (!(tree->bitmap & (1 << i)))
+    if (!(tree->bitmap & ((unsigned)1 << i)))
       return (i << shift) + base;
   }
 
@@ -2768,9 +2771,9 @@ XFORM_NONGCING static uintptr_t hamt_find_free_code(Sc
   minpos = mzHAMT_WORD_SIZE;
   for (i = mzHAMT_WORD_SIZE; i--; ) {
     if (!HASHTR_SUBTREEP(tree->els[i])) {
-      uintptr_t code = (i << shift) + base;
+      uintptr_t code = ((unsigned)i << shift) + base;
       if (_mzHAMT_CODE(tree, i, mzHAMT_WORD_SIZE) == code)
-        return code + (1 << (shift + mzHAMT_LOG_WORD_SIZE));
+        return code + ((unsigned)1 << (shift + mzHAMT_LOG_WORD_SIZE));
       else
         return code;
     } else {
@@ -2784,7 +2787,7 @@ XFORM_NONGCING static uintptr_t hamt_find_free_code(Sc
   }
 
   return hamt_find_free_code((Scheme_Hash_Tree *)tree->els[minpos],
-                             (minpos << shift) + base,
+                             ((unsigned)minpos << shift) + base,
                              shift + mzHAMT_LOG_WORD_SIZE);
 }
 

$OpenBSD$

Index: source/source/CMakeLists.txt
--- source/source/CMakeLists.txt.orig
+++ source/source/CMakeLists.txt
@@ -45,7 +45,7 @@ option(USE_SDL2 "Build using SDL2" OFF)
 option(GAME_MODULES_ONLY "Only build game modules" OFF)
 
 # Windows specific settings
-if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
+if (WIN32)
     set(QFUSION_WINDOWS_ARCH "x86")
 
     if ((MINGW AND CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64") OR (CMAKE_SIZEOF_VOID_P EQUAL 8))
@@ -77,19 +77,18 @@ if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
     if (MSVC)
         add_release_link_flags("/LTCG")
         
-        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT /W4 /Ob1 /GL /Ot")
-        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd /W4")
-        set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MT /W4 /Ob1 /GL /Ot")
-        set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MTd /W4")
-        set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MT /W4")
-        set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /MT /W4")
-        set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} /MT /W4")
-        set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} /MT /W4")	
+        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD /W4 /Ob1 /GL /Ot")
+        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd /W4")
+        set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MD /W4 /Ob1 /GL /Ot")
+        set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MDd /W4")
+        set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MD /W4")
+        set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /MD /W4")
+        set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} /MD /W4")
+        set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} /MD /W4")	
     endif()
-endif()
 
 # OS X specific settings
-if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
+elseif (APPLE)
     set(CMAKE_OSX_ARCHITECTURES "$(ARCHS_STANDARD_64_BIT)")    # Compile only 64-bit version
     set(CMAKE_OSX_SYSROOT "macosx")                            # Compile with latest available OS X sdk
     set(CMAKE_XCODE_ATTRIBUTE_MACOSX_DEPLOYMENT_TARGET "10.8") # Use 10.8 as deployment target
@@ -107,10 +106,9 @@ if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
     set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -std=c++0x")
     set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
     set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
-endif()
 
-# Linux or mingw specific settings
-if (${CMAKE_SYSTEM_NAME} MATCHES "Linux" OR MINGW)
+# Unix specific settings
+else()
     # If no build type was specified - use release build settings
     if (NOT CMAKE_BUILD_TYPE)
         set(CMAKE_BUILD_TYPE "Release")
@@ -118,15 +116,15 @@ if (${CMAKE_SYSTEM_NAME} MATCHES "Linux" OR MINGW)
 
     add_definitions(-D_LARGEFILE64_SOURCE -D_LARGEFILE_SOURCE)
 
-    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pipe -Wall -Wno-unused-function -fvisibility=hidden -Winvalid-pch")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wno-unused-function -fvisibility=hidden -Winvalid-pch -I/usr/X11R6/include")
     set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -O0 -D_DEBUG")
-    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -fno-strict-aliasing -ffast-math -funroll-loops -msse2 -O2")
+    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -fno-strict-aliasing -ffast-math -funroll-loops -msse2")
 
     set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -std=c++0x")
     set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
     set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
 
-    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99 -D_POSIX_C_SOURCE=200112L -D_XOPEN_SOURCE=500")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99")
 
     # -Wl,--as-needed
     add_common_link_flags("-Wl,--as-needed")
@@ -173,7 +171,7 @@ if (NOT GAME_MODULES_ONLY)
     find_package(PNG REQUIRED)
 
     # We need SDL only on non-Windows platforms or when with SDL2-backend
-    if (USE_SDL2 OR (${CMAKE_SYSTEM_NAME} MATCHES "Linux"))
+    if (USE_SDL2 OR (UNIX AND NOT APPLE))
         set(USE_SDL2 1)
         find_package(SDL2 REQUIRED)
     endif()
@@ -183,25 +181,13 @@ if (NOT GAME_MODULES_ONLY)
     endif()
 endif()
 
-if (${CMAKE_SYSTEM_NAME} MATCHES "Linux" OR MINGW)
-    # On Linux we build angelscript from source
-    set(ANGELSCRIPT_DIR ${CMAKE_HOME_DIRECTORY}/../libsrcs/angelscript/sdk/angelscript)
-    if (MINGW)
-        set(ANGELSCRIPT_PROJECT_DIR ${ANGELSCRIPT_DIR}/projects/mingw)
-    else()
-        set(ANGELSCRIPT_PROJECT_DIR ${ANGELSCRIPT_DIR}/projects/gnuc)
-    endif()
-    set(ANGELSCRIPT_INCLUDE_DIR ${ANGELSCRIPT_DIR}/include/)
-    set(ANGELSCRIPT_LIBRARY ${ANGELSCRIPT_DIR}/lib/libangelscript.a)
+# We build angelscript from source
+set(ANGELSCRIPT_DIR ${CMAKE_HOME_DIRECTORY}/../libsrcs/angelscript/sdk/angelscript)
+set(ANGELSCRIPT_INCLUDE_DIR ${ANGELSCRIPT_DIR}/include/)
+add_subdirectory(${ANGELSCRIPT_DIR}/projects/cmake ${ANGELSCRIPT_DIR}/lib/)
 
-    set(ANGELSCRIPT angelscript)
-    add_custom_target(angelscript CXX=${CMAKE_CXX_COMPILER} AR=${CMAKE_AR} RANLIB=${CMAKE_RANLIB} CFLAGS=${CMAKE_C_FLAGS} CXXFLAGS=${CMAKE_CXX_FLAGS} make -C ${ANGELSCRIPT_PROJECT_DIR})
-else()
-    find_package(Angelscript REQUIRED)
-endif()
-
 if (${CMAKE_SYSTEM_NAME} MATCHES "Linux" OR MINGW)
-	if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
+	if (WIN32)
 		STRING(TOLOWER "win32_${QFUSION_WINDOWS_ARCH}.tar.gz" TAR_GZ_NAME)
 	else()
 		STRING(TOLOWER "${CMAKE_SYSTEM_NAME}_${CMAKE_SYSTEM_PROCESSOR}.tar.gz" TAR_GZ_NAME)
@@ -221,7 +207,7 @@ set(LIBROCKET_INCLUDE_DIR ${LIBROCKET_DIR}/Include)
 set(LIBROCKET_SOURCE_DIR ${LIBROCKET_DIR}/Source)
 
 if (NOT GAME_MODULES_ONLY)
-    if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
+    if (WIN32)
         set(CMAKE_EXECUTABLE_SUFFIX "_${QFUSION_WINDOWS_ARCH}${CMAKE_EXECUTABLE_SUFFIX}")
         set(CMAKE_SHARED_LIBRARY_PREFIX "")
         set(CMAKE_SHARED_LIBRARY_SUFFIX "_${QFUSION_WINDOWS_ARCH}${CMAKE_SHARED_LIBRARY_SUFFIX}")
@@ -239,39 +225,12 @@ if (NOT GAME_MODULES_ONLY)
     endif()
 endif()
 
-if (${CMAKE_SYSTEM_NAME} MATCHES "Linux") # Do not add 'OR MINGW' here - we need to use suffix-prefix settings from Windows
-    set(CURL_LIBRARY "")
-    add_definitions(-DLIBCURL_RUNTIME)
-
-    set(JPEG_LIBRARIES "")
-    add_definitions(-DLIBJPEG_RUNTIME)
-
-    set(PNG_LIBRARIES "")
-    add_definitions(-DLIBPNG_RUNTIME)
-
-    set(OGG_LIBRARY "")
-    add_definitions(-DOGGLIB_RUNTIME)
-
-    set(VORBIS_LIBRARIES "")
-    add_definitions(-DVORBISLIB_RUNTIME)
-
-    set(THEORA_LIBRARIES "")
-    add_definitions(-DTHEORALIB_RUNTIME)
-
-    set(FREETYPE_LIBRARIES "")
-    add_definitions(-DFREETYPELIB_RUNTIME)
-
-    set(ZLIB_LIBRARY "")
-    add_definitions(-DZLIB_RUNTIME)
-
-    set(CMAKE_EXECUTABLE_SUFFIX ".${CMAKE_SYSTEM_PROCESSOR}${CMAKE_EXECUTABLE_SUFFIX}")
-    set(CMAKE_SHARED_LIBRARY_SUFFIX "_${CMAKE_SYSTEM_PROCESSOR}${CMAKE_SHARED_LIBRARY_SUFFIX}")
-endif()
-
-if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
-    set(CMAKE_SHARED_LIBRARY_SUFFIX "_mac${CMAKE_SHARED_LIBRARY_SUFFIX}")
-
-    capitalize(QFUSION_CLIENT_NAME)
+if (UNIX)
+    string(TOLOWER ${CMAKE_SYSTEM_NAME} OSNAME)
+    add_definitions(-DBUILDSTRING="${CMAKE_SYSTEM_NAME}")
+    add_definitions(-DOSNAME="${CMAKE_SYSTEM_NAME}")
+    add_definitions(-DARCH="${OSNAME}_${CMAKE_SYSTEM_PROCESSOR}")
+    add_definitions(-DCPUSTRING="${CMAKE_SYSTEM_PROCESSOR}")
 endif()
 
 add_subdirectory(angelwrap)

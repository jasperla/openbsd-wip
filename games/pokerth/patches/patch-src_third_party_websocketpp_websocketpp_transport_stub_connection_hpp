Index: src/third_party/websocketpp/websocketpp/transport/stub/connection.hpp
--- src/third_party/websocketpp/websocketpp/transport/stub/connection.hpp.orig
+++ src/third_party/websocketpp/websocketpp/transport/stub/connection.hpp
@@ -72,10 +72,10 @@ class connection : public lib::enable_shared_from_this
 
     typedef lib::shared_ptr<timer> timer_ptr;
 
-    explicit connection(bool is_server, alog_type & alog, elog_type & elog)
+    explicit connection(bool is_server, const lib::shared_ptr<alog_type> & alog, const lib::shared_ptr<elog_type> & elog)
       : m_alog(alog), m_elog(elog)
     {
-        m_alog.write(log::alevel::devel,"stub con transport constructor");
+        m_alog->write(log::alevel::devel,"stub con transport constructor");
     }
 
     /// Get a shared pointer to this component
@@ -103,6 +103,20 @@ class connection : public lib::enable_shared_from_this
         return false;
     }
 
+    /// Set uri hook
+    /**
+     * Called by the endpoint as a connection is being established to provide
+     * the uri being connected to to the transport layer.
+     *
+     * Implementation is optional and can be ignored if the transport has no
+     * need for this information.
+     *
+     * @since 0.6.0
+     *
+     * @param u The uri to set
+     */
+    void set_uri(uri_ptr) {}
+
     /// Set human readable remote endpoint address
     /**
      * Sets the remote endpoint address returned by `get_remote_endpoint`. This
@@ -161,7 +175,7 @@ class connection : public lib::enable_shared_from_this
      * @param handler The `init_handler` to call when initialization is done
      */
     void init(init_handler handler) {
-        m_alog.write(log::alevel::devel,"stub connection init");
+        m_alog->write(log::alevel::devel,"stub connection init");
         handler(make_error_code(error::not_implemented));
     }
 
@@ -192,7 +206,7 @@ class connection : public lib::enable_shared_from_this
     void async_read_at_least(size_t num_bytes, char * buf, size_t len,
         read_handler handler)
     {
-        m_alog.write(log::alevel::devel, "stub_con async_read_at_least");
+        m_alog->write(log::alevel::devel, "stub_con async_read_at_least");
         handler(make_error_code(error::not_implemented), 0);
     }
 
@@ -209,7 +223,7 @@ class connection : public lib::enable_shared_from_this
      * @param handler Callback to invoke with operation status.
      */
     void async_write(char const * buf, size_t len, write_handler handler) {
-        m_alog.write(log::alevel::devel,"stub_con async_write");
+        m_alog->write(log::alevel::devel,"stub_con async_write");
         handler(make_error_code(error::not_implemented));
     }
 
@@ -225,7 +239,7 @@ class connection : public lib::enable_shared_from_this
      * @param handler Callback to invoke with operation status.
      */
     void async_write(std::vector<buffer> const & bufs, write_handler handler) {
-        m_alog.write(log::alevel::devel,"stub_con async_write buffer list");
+        m_alog->write(log::alevel::devel,"stub_con async_write buffer list");
         handler(make_error_code(error::not_implemented));
     }
 
@@ -260,8 +274,8 @@ class connection : public lib::enable_shared_from_this
     }
 private:
     // member variables!
-    alog_type & m_alog;
-    elog_type & m_elog;
+    lib::shared_ptr<alog_type> m_alog;
+    lib::shared_ptr<elog_type> m_elog;
 };
 
 

Index: src/third_party/websocketpp/websocketpp/common/chrono.hpp
--- src/third_party/websocketpp/websocketpp/common/chrono.hpp.orig
+++ src/third_party/websocketpp/websocketpp/common/chrono.hpp
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014, Peter Thorson. All rights reserved.
+ * Copyright (c) 2015, Peter Thorson. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
@@ -28,10 +28,25 @@
 #ifndef WEBSOCKETPP_COMMON_CHRONO_HPP
 #define WEBSOCKETPP_COMMON_CHRONO_HPP
 
-#ifndef _WEBSOCKETPP_CPP11_CHRONO_
-    #define _WEBSOCKETPP_CPP11_CHRONO_
+#include <websocketpp/common/cpp11.hpp>
+
+// If we've determined that we're in full C++11 mode and the user hasn't
+// explicitly disabled the use of C++11 functional header, then prefer it to
+// boost.
+#if defined _WEBSOCKETPP_CPP11_INTERNAL_ && !defined _WEBSOCKETPP_NO_CPP11_CHRONO_
+    #ifndef _WEBSOCKETPP_CPP11_CHRONO_
+        #define _WEBSOCKETPP_CPP11_CHRONO_
+    #endif
 #endif
 
+// If we're on Visual Studio 2012 or higher and haven't explicitly disabled
+// the use of C++11 chrono header then prefer it to boost.
+#if defined(_MSC_VER) && _MSC_VER >= 1700 && !defined _WEBSOCKETPP_NO_CPP11_CHRONO_
+    #ifndef _WEBSOCKETPP_CPP11_CHRONO_
+        #define _WEBSOCKETPP_CPP11_CHRONO_
+    #endif
+#endif
+
 #ifdef _WEBSOCKETPP_CPP11_CHRONO_
     #include <chrono>
 #else
@@ -42,9 +57,9 @@ namespace websocketpp {
 namespace lib {
 
 #ifdef _WEBSOCKETPP_CPP11_CHRONO_
-    using std::chrono::system_clock;
+    namespace chrono = std::chrono;
 #else
-    using boost::chrono::system_clock;
+    namespace chrono = boost::chrono;
 #endif
 
 } // namespace lib

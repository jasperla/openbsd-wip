Index: src/third_party/websocketpp/websocketpp/http/parser.hpp
--- src/third_party/websocketpp/websocketpp/http/parser.hpp.orig
+++ src/third_party/websocketpp/websocketpp/http/parser.hpp
@@ -230,7 +230,7 @@ InputIterator extract_attributes(InputIterator begin, 
         cursor = http::parser::extract_all_lws(cursor,end);
         ret = http::parser::extract_token(cursor,end);
 
-        if (ret.first == "") {
+        if (ret.first.empty()) {
             // error: expected a token
             return begin;
         } else {
@@ -242,7 +242,7 @@ InputIterator extract_attributes(InputIterator begin, 
         if (cursor == end || *cursor != '=') {
             // if there is an equals sign, read the attribute value. Otherwise
             // record a blank value and continue
-            attributes[name] = "";
+            attributes[name].clear();
             continue;
         }
 
@@ -263,7 +263,7 @@ InputIterator extract_attributes(InputIterator begin, 
         }
 
         ret = http::parser::extract_token(cursor,end);
-        if (ret.first == "") {
+        if (ret.first.empty()) {
             // error : expected token or quoted string
             return begin;
         } else {
@@ -321,7 +321,7 @@ InputIterator extract_parameters(InputIterator begin, 
 
         ret = http::parser::extract_token(cursor,end);
 
-        if (ret.first == "") {
+        if (ret.first.empty()) {
             // error: expected a token
             return begin;
         } else {
@@ -381,9 +381,13 @@ inline std::string strip_lws(std::string const & input
     if (begin == input.end()) {
         return std::string();
     }
-    std::string::const_reverse_iterator end = extract_all_lws(input.rbegin(),input.rend());
 
-    return std::string(begin,end.base());
+    std::string::const_reverse_iterator rbegin = extract_all_lws(input.rbegin(),input.rend());
+    if (rbegin == input.rend()) {
+        return std::string();
+    }
+
+    return std::string(begin,rbegin.base());
 }
 
 /// Base HTTP parser
@@ -394,7 +398,8 @@ inline std::string strip_lws(std::string const & input
 class parser {
 public:
     parser()
-      : m_body_bytes_needed(0)
+      : m_header_bytes(0)
+      , m_body_bytes_needed(0)
       , m_body_bytes_max(max_body_size)
       , m_body_encoding(body_encoding::unknown) {}
     
@@ -436,6 +441,16 @@ class parser { (public)
     bool get_header_as_plist(std::string const & key, parameter_list & out)
         const;
 
+    /// Return a list of all HTTP headers
+    /**
+     * Return a list of all HTTP headers
+     *
+     * @since 0.8.0
+     *
+     * @return A list of all HTTP headers
+     */
+    header_list const & get_headers() const;
+
     /// Append a value to an existing HTTP header
     /**
      * This method will set the value of the HTTP header `key` with the
@@ -596,6 +611,8 @@ class parser { (public)
 
     std::string m_version;
     header_list m_headers;
+    
+    size_t                  m_header_bytes;
     
     std::string             m_body;
     size_t                  m_body_bytes_needed;

Index: src/third_party/websocketpp/websocketpp/extensions/permessage_deflate/disabled.hpp
--- src/third_party/websocketpp/websocketpp/extensions/permessage_deflate/disabled.hpp.orig
+++ src/third_party/websocketpp/websocketpp/extensions/permessage_deflate/disabled.hpp
@@ -29,6 +29,7 @@
 #define WEBSOCKETPP_EXTENSION_PERMESSAGE_DEFLATE_DISABLED_HPP
 
 #include <websocketpp/common/cpp11.hpp>
+#include <websocketpp/common/stdint.hpp>
 #include <websocketpp/common/system_error.hpp>
 
 #include <websocketpp/http/constants.hpp>
@@ -55,7 +56,7 @@ class disabled {
 public:
     /// Negotiate extension
     /**
-     * The disabled extension always fails the negotiation with a disabled 
+     * The disabled extension always fails the negotiation with a disabled
      * error.
      *
      * @param offer Attribute from client's offer
@@ -65,6 +66,17 @@ class disabled {
         return make_pair(make_error_code(error::disabled),std::string());
     }
 
+    /// Initialize state
+    /**
+     * For the disabled extension state initialization is a no-op.
+     *
+     * @param is_server True to initialize as a server, false for a client.
+     * @return A code representing the error that occurred, if any
+     */
+    lib::error_code init(bool) {
+        return lib::error_code();
+    }
+
     /// Returns true if the extension is capable of providing
     /// permessage_deflate functionality
     bool is_implemented() const {
@@ -75,6 +87,17 @@ class disabled {
     /// connection
     bool is_enabled() const {
         return false;
+    }
+
+    /// Generate extension offer
+    /**
+     * Creates an offer string to include in the Sec-WebSocket-Extensions
+     * header of outgoing client requests.
+     *
+     * @return A WebSocket extension offer string for this extension
+     */
+    std::string generate_offer() const {
+        return "";
     }
 
     /// Compress bytes

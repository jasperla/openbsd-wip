Index: src/third_party/websocketpp/websocketpp/common/thread.hpp
--- src/third_party/websocketpp/websocketpp/common/thread.hpp.orig
+++ src/third_party/websocketpp/websocketpp/common/thread.hpp
@@ -33,15 +33,29 @@
 // If we autodetect C++11 and haven't been explicitly instructed to not use
 // C++11 threads, then set the defines that instructs the rest of this header
 // to use C++11 <thread> and <mutex>
-// MinGW by default does not support C++11 thread/mutex so even if the
-// internal check for C++11 passes, ignore it if we are on MinGW
-#if (!defined(__MINGW32__) && !defined(__MINGW64__))
+#if defined _WEBSOCKETPP_CPP11_INTERNAL_ && !defined _WEBSOCKETPP_NO_CPP11_THREAD_
+    // MinGW by default does not support C++11 thread/mutex so even if the
+    // internal check for C++11 passes, ignore it if we are on MinGW
+    #if (!defined(__MINGW32__) && !defined(__MINGW64__))
+        #ifndef _WEBSOCKETPP_CPP11_THREAD_
+            #define _WEBSOCKETPP_CPP11_THREAD_
+        #endif
+    #endif
+#endif
+
+// If we're on Visual Studio 2013 or higher and haven't explicitly disabled
+// the use of C++11 thread header then prefer it to boost.
+#if defined(_MSC_VER) && _MSC_VER >= 1800 && !defined _WEBSOCKETPP_NO_CPP11_THREAD_
     #ifndef _WEBSOCKETPP_CPP11_THREAD_
         #define _WEBSOCKETPP_CPP11_THREAD_
     #endif
 #endif
 
-#ifdef _WEBSOCKETPP_CPP11_THREAD_
+#if defined(_WEBSOCKETPP_MINGW_THREAD_)
+    #include <mingw-threads/mingw.thread.h>
+    #include <mingw-threads/mingw.mutex.h>
+    #include <mingw-threads/mingw.condition_variable.h>
+#elif defined(_WEBSOCKETPP_CPP11_THREAD_)
     #include <thread>
     #include <mutex>
     #include <condition_variable>
@@ -54,7 +68,7 @@
 namespace websocketpp {
 namespace lib {
 
-#ifdef _WEBSOCKETPP_CPP11_THREAD_
+#if defined(_WEBSOCKETPP_CPP11_THREAD_) || defined(_WEBSOCKETPP_MINGW_THREAD_)
     using std::mutex;
     using std::lock_guard;
     using std::thread;

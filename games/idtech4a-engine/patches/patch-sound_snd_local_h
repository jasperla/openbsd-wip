Index: sound/snd_local.h
--- sound/snd_local.h.orig
+++ sound/snd_local.h
@@ -4,7 +4,7 @@
 Doom 3 GPL Source Code
 Copyright (C) 1999-2011 id Software LLC, a ZeniMax Media company.
 
-This file is part of the Doom 3 GPL Source Code (?Doom 3 Source Code?).
+This file is part of the Doom 3 GPL Source Code ("Doom 3 Source Code").
 
 Doom 3 Source Code is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
@@ -29,73 +29,23 @@ If you have questions concerning this license or the a
 #ifndef __SND_LOCAL_H__
 #define __SND_LOCAL_H__
 
-#ifdef _OPENAL
-
 // you need the OpenAL headers for build, even if AL is not enabled - http://www.openal.org/
 #ifdef _WIN32
-#ifdef _OPENAL_SOFT
-#include "../externlibs/openal-soft/include/AL/al.h"
-#include "../externlibs/openal-soft/include/AL/alc.h"
-#include "../externlibs/openal-soft/include/AL/efx.h"
-#include "../openal/idal.h"
-#define ID_ALCHAR (ALubyte *)
-#else
-#include "../openal/include/al.h"
-#include "../openal/include/alc.h"
-#include "../openal/idal.h"
+#include <al.h>
+#include <alc.h>
 // broken OpenAL SDK ?
 #define ID_ALCHAR (ALubyte *)
-#endif
 #elif defined( MACOS_X )
 #include <OpenAL/al.h>
 #include <OpenAL/alc.h>
 #define ID_ALCHAR
-#elif defined(_OPENAL_SOFT)
-#include "../externlibs/openal-soft/include/AL/al.h"
-#include "../externlibs/openal-soft/include/AL/alc.h"
-#include "../externlibs/openal-soft/include/AL/efx.h"
-#include "../openal/idal.h"
-#define ID_ALCHAR (ALubyte *)
 #else
 #include <AL/al.h>
 #include <AL/alc.h>
 #define ID_ALCHAR
 #endif
-#include "../openal/include/efxlib.h"
+#include "efxlib.h"
 
-#else
-
-#define EFXprintf(...) do { } while (false)
-
-/** 8-bit boolean */
-typedef char ALboolean;
-/** character */
-typedef char ALchar;
-/** signed 8-bit 2's complement integer */
-typedef signed char ALbyte;
-/** unsigned 8-bit integer */
-typedef unsigned char ALubyte;
-/** signed 16-bit 2's complement integer */
-typedef short ALshort;
-/** unsigned 16-bit integer */
-typedef unsigned short ALushort;
-/** signed 32-bit 2's complement integer */
-typedef int ALint;
-/** unsigned 32-bit integer */
-typedef unsigned int ALuint;
-/** non-negative 32-bit binary integer size */
-typedef int ALsizei;
-/** enumerated 32-bit value */
-typedef int ALenum;
-/** 32-bit IEEE754 floating-point */
-typedef float ALfloat;
-/** 64-bit IEEE754 floating-point */
-typedef double ALdouble;
-/** void type (for opaque pointers only) */
-typedef void ALvoid;
-
-#endif
-
 // demo sound commands
 typedef enum {
 	SCMD_STATE,				// followed by a load game state
@@ -118,7 +68,6 @@ const float SND_EPSILON				= 1.0f / 32768.0f;	// if vo
 
 const int ROOM_SLICES_IN_BUFFER		= 10;
 
-class idAudioHardware;
 class idAudioBuffer;
 class idWaveFile;
 class idSoundCache;
@@ -150,7 +99,7 @@ struct waveformatex_s {
 	word    nBlockAlign;       /* block size of data */
 	word    wBitsPerSample;    /* Number of bits per sample of mono data */
 	word    cbSize;            /* The count in bytes of the size of
-                                    extra information (after cbSize) */
+									extra information (after cbSize) */
 } PACKED;
 
 typedef waveformatex_s waveformatex_t;
@@ -196,7 +145,7 @@ struct waveformatextensible_s {
 		word wReserved;                 /* If neither applies, set to zero*/
 	} Samples;
 	dword           dwChannelMask;      /* which channels are */
-	/* present in stream  */
+										/* present in stream  */
 	int            SubFormat;
 } PACKED;
 
@@ -229,106 +178,64 @@ idWaveFile
 ===================================================================================
 */
 
-class idWaveFile
-{
-	public:
-		idWaveFile(void);
-		~idWaveFile(void);
+class idWaveFile {
+public:
+					idWaveFile( void );
+					~idWaveFile( void );
 
-		int				Open(const char *strFileName, waveformatex_t *pwfx = NULL);
-		int				OpenFromMemory(short *pbData, int ulDataSize, waveformatextensible_t *pwfx);
-		int				Read(byte *pBuffer, int dwSizeToRead, int *pdwSizeRead);
-		int				Seek(int offset);
-		int				Close(void);
-		int				ResetFile(void);
+	int				Open( const char* strFileName, waveformatex_t* pwfx = NULL );
+	int				OpenFromMemory( short* pbData, int ulDataSize, waveformatextensible_t* pwfx );
+	int				Read( byte* pBuffer, int dwSizeToRead, int *pdwSizeRead );
+	int				Seek( int offset );
+	int				Close( void );
+	int				ResetFile( void );
 
-		int				GetOutputSize(void) {
-			return mdwSize;
-		}
-		int				GetMemorySize(void) {
-			return mMemSize;
-		}
+	int				GetOutputSize( void ) { return mdwSize; }
+	int				GetMemorySize( void ) { return mMemSize; }
 
-		waveformatextensible_t	mpwfx;        // Pointer to waveformatex structure
+	waveformatextensible_t	mpwfx;        // Pointer to waveformatex structure
 
-	private:
-		idFile 		*mhmmio;			// I/O handle for the WAVE
-		mminfo_t		mck;			// Multimedia RIFF chunk
-		mminfo_t		mckRiff;		// used when opening a WAVE file
-		dword			mdwSize;		// size in samples
-		dword			mMemSize;		// size of the wave data in memory
-		dword			mseekBase;
-		ID_TIME_T			mfileTime;
+private:
+	idFile *		mhmmio;			// I/O handle for the WAVE
+	mminfo_t		mck;			// Multimedia RIFF chunk
+	mminfo_t		mckRiff;		// used when opening a WAVE file
+	dword			mdwSize;		// size in samples
+	dword			mMemSize;		// size of the wave data in memory
+	dword			mseekBase;
+	ID_TIME_T			mfileTime;
 
-		bool			mbIsReadingFromMemory;
-		short 			*mpbData;
-		short 			*mpbDataCur;
-		dword			mulDataSize;
+	bool			mbIsReadingFromMemory;
+	short *			mpbData;
+	short *			mpbDataCur;
+	dword			mulDataSize;
 
-		void 			*ogg;			// only !NULL when !s_realTimeDecoding
-#ifdef _USING_STB_OGG
-        byte*			oggData; // the contents of the .ogg for stbi_vorbis (it doesn't support custom reading callbacks)
-#endif
-		bool			isOgg;
+	void *			ogg;			// only !NULL when !s_realTimeDecoding
+	bool			isOgg;
 
-	private:
-		int				ReadMMIO(void);
+private:
+	int				ReadMMIO( void );
 
-		int				OpenOGG(const char *strFileName, waveformatex_t *pwfx = NULL);
-		int				ReadOGG(byte *pBuffer, int dwSizeToRead, int *pdwSizeRead);
-		int				CloseOGG(void);
+	int				OpenOGG( const char* strFileName, waveformatex_t* pwfx = NULL );
+	int				ReadOGG( byte* pBuffer, int dwSizeToRead, int *pdwSizeRead );
+	int				CloseOGG( void );
 };
 
 
 /*
 ===================================================================================
 
-idAudioHardware
-
-===================================================================================
-*/
-
-class idAudioHardware
-{
-	public:
-		static idAudioHardware *Alloc();
-
-		virtual					~idAudioHardware();
-
-		virtual bool			Initialize() = 0;
-
-		virtual bool			Lock(void **pDSLockedBuffer, ulong *dwDSLockedBufferSize) = 0;
-		virtual bool			Unlock(void *pDSLockedBuffer, dword dwDSLockedBufferSize) = 0;
-		virtual bool			GetCurrentPosition(ulong *pdwCurrentWriteCursor) = 0;
-
-		// try to write as many sound samples to the device as possible without blocking and prepare for a possible new mixing call
-		// returns wether there is *some* space for writing available
-		virtual bool			Flush(void) = 0;
-
-		virtual void			Write(bool flushing) = 0;
-
-		virtual int				GetNumberOfSpeakers(void)= 0;
-		virtual int				GetMixBufferSize(void) = 0;
-		virtual short			*GetMixBuffer(void) = 0;
-};
-
-
-/*
-===================================================================================
-
 Encapsulates functionality of a DirectSound buffer.
 
 ===================================================================================
 */
 
-class idAudioBuffer
-{
-	public:
-		virtual int 		Play(dword dwPriority=0, dword dwFlags=0) = 0;
-		virtual int			Stop(void) = 0;
-		virtual int			Reset(void) = 0;
-		virtual bool		IsSoundPlaying(void) = 0;
-		virtual void	 	SetVolume(float x) = 0;
+class idAudioBuffer {
+public:
+	virtual int		Play( dword dwPriority=0, dword dwFlags=0 ) = 0;
+	virtual int			Stop( void ) = 0;
+	virtual int			Reset( void ) = 0;
+	virtual bool		IsSoundPlaying( void ) = 0;
+	virtual void		SetVolume( float x ) = 0;
 };
 
 
@@ -347,122 +254,76 @@ typedef enum {
 	REMOVE_STATUS_SAMPLEFINISHED		=  2
 } removeStatus_t;
 
-class idSoundFade
-{
-	public:
-		int					fadeStart44kHz;
-		int					fadeEnd44kHz;
-		float				fadeStartVolume;		// in dB
-		float				fadeEndVolume;			// in dB
+class idSoundFade {
+public:
+	int					fadeStart44kHz;
+	int					fadeEnd44kHz;
+	float				fadeStartVolume;		// in dB
+	float				fadeEndVolume;			// in dB
 
-		void				Clear();
-		float				FadeDbAt44kHz(int current44kHz);
+	void				Clear();
+	float				FadeDbAt44kHz( int current44kHz );
 };
 
-class SoundFX
-{
-	protected:
-		bool				initialized;
+class SoundFX {
+protected:
+	bool				initialized;
 
-		int					channel;
-		int					maxlen;
+	int					channel;
+	int					maxlen;
 
-		float				*buffer;
-		float				continuitySamples[4];
+	float*				buffer;
+	float				continuitySamples[4];
 
-		float				param;
+	float				param;
 
-	public:
-		SoundFX()										{
-			channel = 0;
-			buffer = NULL;
-			initialized = false;
-			maxlen = 0;
-			memset(continuitySamples, 0, sizeof(float) * 4);
-		};
-		virtual				~SoundFX()										{
-			if (buffer) delete buffer;
-		};
+public:
+						SoundFX()										{ channel = 0; buffer = NULL; initialized = false; maxlen = 0; memset( continuitySamples, 0, sizeof( float ) * 4 ); };
+	virtual				~SoundFX()										{ if ( buffer ) delete buffer; };
 
-		virtual void		Initialize()									{ };
-		virtual void		ProcessSample(float *in, float *out) = 0;
+	virtual void		Initialize()									{ };
+	virtual void		ProcessSample( float* in, float* out ) = 0;
 
-		void				SetChannel(int chan)							{
-			channel = chan;
-		};
-		int					GetChannel()									{
-			return channel;
-		};
+	void				SetChannel( int chan )							{ channel = chan; };
+	int					GetChannel()									{ return channel; };
 
-		void				SetContinuitySamples(float in1, float in2, float out1, float out2)		{
-			continuitySamples[0] = in1;
-			continuitySamples[1] = in2;
-			continuitySamples[2] = out1;
-			continuitySamples[3] = out2;
-		};		// FIXME?
-		void				GetContinuitySamples(float &in1, float &in2, float &out1, float &out2)	{
-			in1 = continuitySamples[0];
-			in2 = continuitySamples[1];
-			out1 = continuitySamples[2];
-			out2 = continuitySamples[3];
-		};
+	void				SetContinuitySamples( float in1, float in2, float out1, float out2 )		{ continuitySamples[0] = in1; continuitySamples[1] = in2; continuitySamples[2] = out1; continuitySamples[3] = out2; };		// FIXME?
+	void				GetContinuitySamples( float& in1, float& in2, float& out1, float& out2 )	{ in1 = continuitySamples[0]; in2 = continuitySamples[1]; out1 = continuitySamples[2]; out2 = continuitySamples[3]; };
 
-		void				SetParameter(float val)						{
-			param = val;
-		};
+	void				SetParameter( float val )						{ param = val; };
 };
 
-class SoundFX_Lowpass : public SoundFX
-{
-	public:
-		virtual void		ProcessSample(float *in, float *out);
+class SoundFX_Lowpass : public SoundFX {
+public:
+	virtual void		ProcessSample( float* in, float* out );
 };
 
-class SoundFX_LowpassFast : public SoundFX
-{
-		float				freq;
-		float				res;
-		float				a1, a2, a3;
-		float				b1, b2;
+class SoundFX_LowpassFast : public SoundFX {
+	float				freq;
+	float				res;
+	float				a1, a2, a3;
+	float				b1, b2;
 
-	public:
-		virtual void		ProcessSample(float *in, float *out);
-		void				SetParms(float p1 = 0, float p2 = 0, float p3 = 0);
-
-        void				Clear() {
-            freq = res = 0.0f;
-            a1 = a2 = a3 = 0.0f;
-            b1 = b2 = 0.0f;
-        }
+public:
+	virtual void		ProcessSample( float* in, float* out );
+	void				SetParms( float p1 = 0, float p2 = 0, float p3 = 0 );
 };
 
-class SoundFX_Comb : public SoundFX
-{
-		int					currentTime;
+class SoundFX_Comb : public SoundFX {
+	int					currentTime;
 
-	public:
-		virtual void		Initialize();
-		virtual void		ProcessSample(float *in, float *out);
+public:
+	virtual void		Initialize();
+	virtual void		ProcessSample( float* in, float* out );
 };
 
-class FracTime
-{
-	public:
-		int			time;
-		float		frac;
+class FracTime {
+public:
+	int			time;
+	float		frac;
 
-		void		Set(int val)					{
-			time = val;
-			frac = 0;
-		};
-		void		Increment(float val)			{
-			frac += val;
-
-			while (frac >= 1.f) {
-				time++;
-				frac--;
-			}
-		};
+	void		Set( int val )					{ time = val; frac = 0; };
+	void		Increment( float val )			{ frac += val; while ( frac >= 1.f ) { time++; frac--; } };
 };
 
 enum {
@@ -472,102 +333,95 @@ enum {
 
 class idSoundChannel;
 
-class idSlowChannel
-{
-		bool					active;
-		const idSoundChannel	*chan;
+class idSlowChannel {
+	bool					active;
+	const idSoundChannel*	chan;
 
-		int						playbackState;
-		int						triggerOffset;
+	int						playbackState;
+	int						triggerOffset;
 
-		FracTime				newPosition;
-		int						newSampleOffset;
+	FracTime				newPosition;
+	int						newSampleOffset;
 
-		FracTime				curPosition;
-		int						curSampleOffset;
+	FracTime				curPosition;
+	int						curSampleOffset;
 
-		SoundFX_LowpassFast		lowpass;
+	SoundFX_LowpassFast		lowpass;
 
-		// functions
-		void					GenerateSlowChannel(FracTime &playPos, int sampleCount44k, float *finalBuffer);
+	// functions
+	void					GenerateSlowChannel( FracTime& playPos, int sampleCount44k, float* finalBuffer );
 
-		float					GetSlowmoSpeed();
+	float					GetSlowmoSpeed();
 
-	public:
+public:
 
-		void					AttachSoundChannel(const idSoundChannel *chan);
-		void					Reset();
+	void					AttachSoundChannel( const idSoundChannel *chan );
+	void					Reset();
 
-		void					GatherChannelSamples(int sampleOffset44k, int sampleCount44k, float *dest);
+	void					GatherChannelSamples( int sampleOffset44k, int sampleCount44k, float *dest );
 
-		bool					IsActive()				{
-			return active;
-		};
-		FracTime				GetCurrentPosition()	{
-			return curPosition;
-		};
+	bool					IsActive()				{ return active; };
+	FracTime				GetCurrentPosition()	{ return curPosition; };
 };
 
-class idSoundChannel
-{
-	public:
-		idSoundChannel(void);
-		~idSoundChannel(void);
+class idSoundChannel {
+public:
+						idSoundChannel( void );
+						~idSoundChannel( void );
 
-		void				Clear(void);
-		void				Start(void);
-		void				Stop(void);
-		void				GatherChannelSamples(int sampleOffset44k, int sampleCount44k, float *dest) const;
-		void				ALStop(void);			// free OpenAL resources if any
+	void				Clear( void );
+	void				Start( void );
+	void				Stop( void );
+	void				GatherChannelSamples( int sampleOffset44k, int sampleCount44k, float *dest ) const;
+	void				ALStop( void );			// free OpenAL resources if any
 
-		bool				triggerState;
-		int					trigger44kHzTime;		// hardware time sample the channel started
-		int					triggerGame44kHzTime;	// game time sample time the channel started
-		soundShaderParms_t	parms;					// combines the shader parms and the per-channel overrides
-		idSoundSample 		*leadinSample;			// if not looped, this is the only sample
-		s_channelType		triggerChannel;
-		const idSoundShader *soundShader;
-		idSampleDecoder 	*decoder;
-		float				diversity;
-		float				lastVolume;				// last calculated volume based on distance
-		float				lastV[6];				// last calculated volume for each speaker, so we can smoothly fade
-		idSoundFade			channelFade;
-		bool				triggered;
-		ALuint				openalSource;
-		ALuint				openalStreamingOffset;
-		ALuint				openalStreamingBuffer[3];
-		ALuint				lastopenalStreamingBuffer[3];
+	bool				triggerState;
+	int					trigger44kHzTime;		// hardware time sample the channel started
+	int					triggerGame44kHzTime;	// game time sample time the channel started
+	soundShaderParms_t	parms;					// combines the shader parms and the per-channel overrides
+	idSoundSample *		leadinSample;			// if not looped, this is the only sample
+	s_channelType		triggerChannel;
+	const idSoundShader *soundShader;
+	idSampleDecoder *	decoder;
+	float				diversity;
+	float				lastVolume;				// last calculated volume based on distance
+	float				lastV[6];				// last calculated volume for each speaker, so we can smoothly fade
+	idSoundFade			channelFade;
+	bool				triggered;
+	ALuint				openalSource;
+	ALuint				openalStreamingOffset;
+	ALuint				openalStreamingBuffer[3];
+	ALuint				lastopenalStreamingBuffer[3];
 
-		bool				disallowSlow;
+	bool				disallowSlow;
 
 };
 
-class idSoundEmitterLocal : public idSoundEmitter
-{
-	public:
+class idSoundEmitterLocal : public idSoundEmitter {
+public:
 
-		idSoundEmitterLocal(void);
-		virtual				~idSoundEmitterLocal(void);
+						idSoundEmitterLocal( void );
+	virtual				~idSoundEmitterLocal( void );
 
-		//----------------------------------------------
+	//----------------------------------------------
 
-		// the "time" parameters should be game time in msec, which is used to make queries
-		// return deterministic values regardless of async buffer scheduling
+	// the "time" parameters should be game time in msec, which is used to make queries
+	// return deterministic values regardless of async buffer scheduling
 
-		// a non-immediate free will let all currently playing sounds complete
-		virtual void		Free(bool immediate);
+	// a non-immediate free will let all currently playing sounds complete
+	virtual void		Free( bool immediate );
 
-		// the parms specified will be the default overrides for all sounds started on this emitter.
-		// NULL is acceptable for parms
-		virtual void		UpdateEmitter(const idVec3 &origin, int listenerId, const soundShaderParms_t *parms);
+	// the parms specified will be the default overrides for all sounds started on this emitter.
+	// NULL is acceptable for parms
+	virtual void		UpdateEmitter( const idVec3 &origin, int listenerId, const soundShaderParms_t *parms );
 
-		// returns the length of the started sound in msec
-		virtual int			StartSound(const idSoundShader *shader, const s_channelType channel, float diversity = 0, int shaderFlags = 0, bool allowSlow = true /* D3XP */);
+	// returns the length of the started sound in msec
+	virtual int			StartSound( const idSoundShader *shader, const s_channelType channel, float diversity = 0, int shaderFlags = 0, bool allowSlow = true /* D3XP */ );
 
-		// can pass SCHANNEL_ANY
-		virtual void		ModifySound(const s_channelType channel, const soundShaderParms_t *parms);
-		virtual void		StopSound(const s_channelType channel);
-		virtual void		FadeSound(const s_channelType channel, float to, float over);
+	// can pass SCHANNEL_ANY
+	virtual void		ModifySound( const s_channelType channel, const soundShaderParms_t *parms );
+	virtual void		StopSound( const s_channelType channel );
+	virtual void		FadeSound( const s_channelType channel, float to, float over );
 
 #ifdef _RAVEN
         virtual void		UpdateEmitter(const idVec3& origin, const idVec3& velocity, int listenerId, const soundShaderParms_t* parms) {
@@ -586,57 +440,57 @@ class idSoundEmitterLocal : public idSoundEmitter
 
 		virtual bool		CurrentlyPlaying(void) const;
 
-		// can pass SCHANNEL_ANY
-		virtual	float		CurrentAmplitude(void);
+	// can pass SCHANNEL_ANY
+	virtual	float		CurrentAmplitude( void );
 
-		// used for save games
-		virtual	int			Index(void) const;
+	// used for save games
+	virtual	int			Index( void ) const;
 
-		//----------------------------------------------
+	//----------------------------------------------
 
-		void				Clear(void);
+	void				Clear( void );
 
-		void				OverrideParms(const soundShaderParms_t *base, const soundShaderParms_t *over, soundShaderParms_t *out);
-		void				CheckForCompletion(int current44kHzTime);
-		void				Spatialize(idVec3 listenerPos, int listenerArea, idRenderWorld *rw);
+	void				OverrideParms( const soundShaderParms_t *base, const soundShaderParms_t *over, soundShaderParms_t *out );
+	void				CheckForCompletion( int current44kHzTime );
+	void				Spatialize( idVec3 listenerPos, int listenerArea, idRenderWorld *rw );
 
-		idSoundWorldLocal 	*soundWorld;				// the world that holds this emitter
+	idSoundWorldLocal *	soundWorld;				// the world that holds this emitter
 
-		int					index;						// in world emitter list
-		removeStatus_t		removeStatus;
+	int					index;						// in world emitter list
+	removeStatus_t		removeStatus;
 
-		idVec3				origin;
-		int					listenerId;
-		soundShaderParms_t	parms;						// default overrides for all channels
+	idVec3				origin;
+	int					listenerId;
+	soundShaderParms_t	parms;						// default overrides for all channels
 
 
-		// the following are calculated in UpdateEmitter, and don't need to be archived
-		float				maxDistance;				// greatest of all playing channel distances
-		int					lastValidPortalArea;		// so an emitter that slides out of the world continues playing
-		bool				playing;					// if false, no channel is active
-		bool				hasShakes;
-		idVec3				spatializedOrigin;			// the virtual sound origin, either the real sound origin,
-		// or a point through a portal chain
-		float				realDistance;				// in meters
-		float				distance;					// in meters, this may be the straight-line distance, or
-		// it may go through a chain of portals.  If there
-		// is not an open-portal path, distance will be > maxDistance
+	// the following are calculated in UpdateEmitter, and don't need to be archived
+	float				maxDistance;				// greatest of all playing channel distances
+	int					lastValidPortalArea;		// so an emitter that slides out of the world continues playing
+	bool				playing;					// if false, no channel is active
+	bool				hasShakes;
+	idVec3				spatializedOrigin;			// the virtual sound origin, either the real sound origin,
+													// or a point through a portal chain
+	float				realDistance;				// in meters
+	float				distance;					// in meters, this may be the straight-line distance, or
+													// it may go through a chain of portals.  If there
+													// is not an open-portal path, distance will be > maxDistance
 
-		// a single soundEmitter can have many channels playing from the same point
-		idSoundChannel		channels[SOUND_MAX_CHANNELS];
+	// a single soundEmitter can have many channels playing from the same point
+	idSoundChannel		channels[SOUND_MAX_CHANNELS];
 
-		idSlowChannel		slowChannels[SOUND_MAX_CHANNELS];
+	idSlowChannel		slowChannels[SOUND_MAX_CHANNELS];
 
-		idSlowChannel		GetSlowChannel(const idSoundChannel *chan);
-		void				SetSlowChannel(const idSoundChannel *chan, idSlowChannel slow);
-		void				ResetSlowChannel(const idSoundChannel *chan);
+	idSlowChannel		GetSlowChannel( const idSoundChannel *chan );
+	void				SetSlowChannel( const idSoundChannel *chan, idSlowChannel slow );
+	void				ResetSlowChannel( const idSoundChannel *chan );
 
-		// this is just used for feedback to the game or rendering system:
-		// flashing lights and screen shakes.  Because the material expression
-		// evaluation doesn't do common subexpression removal, we cache the
-		// last generated value
-		int					ampTime;
-		float				amplitude;
+	// this is just used for feedback to the game or rendering system:
+	// flashing lights and screen shakes.  Because the material expression
+	// evaluation doesn't do common subexpression removal, we cache the
+	// last generated value
+	int					ampTime;
+	float				amplitude;
 };
 
 
@@ -648,23 +502,22 @@ idSoundWorldLocal
 ===================================================================================
 */
 
-class s_stats
-{
-	public:
-		s_stats(void) {
-			rinuse = 0;
-			runs = 1;
-			timeinprocess = 0;
-			missedWindow = 0;
-			missedUpdateWindow = 0;
-			activeSounds = 0;
-		}
-		int		rinuse;
-		int		runs;
-		int		timeinprocess;
-		int		missedWindow;
-		int		missedUpdateWindow;
-		int		activeSounds;
+class s_stats {
+public:
+	s_stats( void ) {
+		rinuse = 0;
+		runs = 1;
+		timeinprocess = 0;
+		missedWindow = 0;
+		missedUpdateWindow = 0;
+		activeSounds = 0;
+	}
+	int		rinuse;
+	int		runs;
+	int		timeinprocess;
+	int		missedWindow;
+	int		missedUpdateWindow;
+	int		activeSounds;
 };
 
 typedef struct soundPortalTrace_s {
@@ -672,84 +525,82 @@ typedef struct soundPortalTrace_s {
 	const struct soundPortalTrace_s	*prevStack;
 } soundPortalTrace_t;
 
-class idSoundWorldLocal : public idSoundWorld
-{
-	public:
-		virtual					~idSoundWorldLocal(void);
+class idSoundWorldLocal : public idSoundWorld {
+public:
+	virtual					~idSoundWorldLocal( void );
 
-		// call at each map start
-		virtual void			ClearAllSoundEmitters(void);
-		virtual void			StopAllSounds(void);
+	// call at each map start
+	virtual void			ClearAllSoundEmitters( void );
+	virtual void			StopAllSounds( void );
 
-		// get a new emitter that can play sounds in this world
-		virtual idSoundEmitter *AllocSoundEmitter(void);
+	// get a new emitter that can play sounds in this world
+	virtual idSoundEmitter *AllocSoundEmitter( void );
 
-		// for load games
-		virtual idSoundEmitter *EmitterForIndex(int index);
+	// for load games
+	virtual idSoundEmitter *EmitterForIndex( int index );
 
-		// query data from all emitters in the world
-		virtual float			CurrentShakeAmplitudeForPosition(const int time, const idVec3 &listererPosition);
+	// query data from all emitters in the world
+	virtual float			CurrentShakeAmplitudeForPosition( const int time, const idVec3 &listererPosition );
 
-		// where is the camera/microphone
-		// listenerId allows listener-private sounds to be added
-		virtual void			PlaceListener(const idVec3 &origin, const idMat3 &axis, const int listenerId, const int gameTime, const idStr &areaName);
+	// where is the camera/microphone
+	// listenerId allows listener-private sounds to be added
+	virtual void			PlaceListener( const idVec3 &origin, const idMat3 &axis, const int listenerId, const int gameTime, const idStr& areaName );
 
-		// fade all sounds in the world with a given shader soundClass
-		// to is in Db (sigh), over is in seconds
-		virtual void			FadeSoundClasses(const int soundClass, const float to, const float over);
+	// fade all sounds in the world with a given shader soundClass
+	// to is in Db (sigh), over is in seconds
+	virtual void			FadeSoundClasses( const int soundClass, const float to, const float over );
 
-		// dumps the current state and begins archiving commands
-		virtual void			StartWritingDemo(idDemoFile *demo);
-		virtual void			StopWritingDemo(void);
+	// dumps the current state and begins archiving commands
+	virtual void			StartWritingDemo( idDemoFile *demo );
+	virtual void			StopWritingDemo( void );
 
-		// read a sound command from a demo file
-		virtual void			ProcessDemoCommand(idDemoFile *readDemo);
+	// read a sound command from a demo file
+	virtual void			ProcessDemoCommand( idDemoFile *readDemo );
 
-		// background music
-		virtual void			PlayShaderDirectly(const char *name, int channel = -1);
+	// background music
+	virtual void			PlayShaderDirectly( const char *name, int channel = -1 );
 
-		// pause and unpause the sound world
-		virtual void			Pause(void);
-		virtual void			UnPause(void);
-		virtual bool			IsPaused(void);
+	// pause and unpause the sound world
+	virtual void			Pause( void );
+	virtual void			UnPause( void );
+	virtual bool			IsPaused( void );
 
-		// avidump
-		virtual void			AVIOpen(const char *path, const char *name);
-		virtual void			AVIClose(void);
+	// avidump
+	virtual void			AVIOpen( const char *path, const char *name );
+	virtual void			AVIClose( void );
 
-		// SaveGame Support
-		virtual void			WriteToSaveGame(idFile *savefile);
-		virtual void			ReadFromSaveGame(idFile *savefile);
+	// SaveGame Support
+	virtual void			WriteToSaveGame( idFile *savefile );
+	virtual void			ReadFromSaveGame( idFile *savefile );
 
-		virtual void			ReadFromSaveGameSoundChannel(idFile *saveGame, idSoundChannel *ch);
-		virtual void			ReadFromSaveGameSoundShaderParams(idFile *saveGame, soundShaderParms_t *params);
-		virtual void			WriteToSaveGameSoundChannel(idFile *saveGame, idSoundChannel *ch);
-		virtual void			WriteToSaveGameSoundShaderParams(idFile *saveGame, soundShaderParms_t *params);
+	virtual void			ReadFromSaveGameSoundChannel( idFile *saveGame, idSoundChannel *ch );
+	virtual void			ReadFromSaveGameSoundShaderParams( idFile *saveGame, soundShaderParms_t *params );
+	virtual void			WriteToSaveGameSoundChannel( idFile *saveGame, idSoundChannel *ch );
+	virtual void			WriteToSaveGameSoundShaderParams( idFile *saveGame, soundShaderParms_t *params );
 
-		virtual void			SetSlowmo(bool active);
-		virtual void			SetSlowmoSpeed(float speed);
-		virtual void			SetEnviroSuit(bool active);
+	virtual void			SetSlowmo( bool active );
+	virtual void			SetSlowmoSpeed( float speed );
+	virtual void			SetEnviroSuit( bool active );
 
-		//=======================================
+	//=======================================
 
-		idSoundWorldLocal(void);
+							idSoundWorldLocal( void );
 
-		void					Shutdown(void);
-		void					Init(idRenderWorld *rw);
-		void					ClearBuffer(void);
+	void					Shutdown( void );
+	void					Init( idRenderWorld *rw );
 
-		// update
-		void					ForegroundUpdate(int currentTime);
-		void					OffsetSoundTime(int offset44kHz);
+	// update
+	void					ForegroundUpdate( int currentTime );
+	void					OffsetSoundTime( int offset44kHz );
 
-		idSoundEmitterLocal 	*AllocLocalSoundEmitter();
-		void					CalcEars(int numSpeakers, idVec3 realOrigin, idVec3 listenerPos, idMat3 listenerAxis, float ears[6], float spatialize);
-		void					AddChannelContribution(idSoundEmitterLocal *sound, idSoundChannel *chan,
-		                int current44kHz, int numSpeakers, float *finalMixBuffer);
-		void					MixLoop(int current44kHz, int numSpeakers, float *finalMixBuffer);
-		void					AVIUpdate(void);
-		void					ResolveOrigin(const int stackDepth, const soundPortalTrace_t *prevStack, const int soundArea, const float dist, const idVec3 &soundOrigin, idSoundEmitterLocal *def);
-		float					FindAmplitude(idSoundEmitterLocal *sound, const int localTime, const idVec3 *listenerPosition, const s_channelType channel, bool shakesOnly);
+	idSoundEmitterLocal *	AllocLocalSoundEmitter();
+	void					CalcEars( int numSpeakers, idVec3 realOrigin, idVec3 listenerPos, idMat3 listenerAxis, float ears[6], float spatialize );
+	void					AddChannelContribution( idSoundEmitterLocal *sound, idSoundChannel *chan,
+												int current44kHz, int numSpeakers, float *finalMixBuffer );
+	void					MixLoop( int current44kHz, int numSpeakers, float *finalMixBuffer );
+	void					AVIUpdate( void );
+	void					ResolveOrigin( const int stackDepth, const soundPortalTrace_t *prevStack, const int soundArea, const float dist, const idVec3& soundOrigin, idSoundEmitterLocal *def );
+	float					FindAmplitude( idSoundEmitterLocal *sound, const int localTime, const idVec3 *listenerPosition, const s_channelType channel, bool shakesOnly );
 
 #ifdef _HUMANHEAD
         virtual void			RegisterLocation(int area, const char *locationName) { (void)area; (void)locationName; }
@@ -760,44 +611,36 @@ class idSoundWorldLocal : public idSoundWorld
 #endif
 		//============================================
 
-		idRenderWorld 			*rw;				// for portals and debug drawing
-		idDemoFile 			*writeDemo;			// if not NULL, archive commands here
+	idRenderWorld *			rw;				// for portals and debug drawing
+	idDemoFile *			writeDemo;			// if not NULL, archive commands here
 
-		idMat3					listenerAxis;
-		idVec3					listenerPos;		// position in meters
-		int						listenerPrivateId;
-		idVec3					listenerQU;			// position in "quake units"
-		int						listenerArea;
-		idStr					listenerAreaName;
-#ifdef _OPENAL_EFX
-	ALuint					listenerEffect;
-	ALuint					listenerSlot;
-	bool					listenerAreFiltersInitialized;
-	ALuint					listenerFilters[2]; // 0 - direct; 1 - send.
-	float					listenerSlotReverbGain;
-#else
+	idMat3					listenerAxis;
+	idVec3					listenerPos;		// position in meters
+	int						listenerPrivateId;
+	idVec3					listenerQU;			// position in "quake units"
+	int						listenerArea;
+	idStr					listenerAreaName;
 	int						listenerEnvironmentID;
-#endif
 
-		int						gameMsec;
-		int						game44kHz;
-		int						pause44kHz;
-		int						lastAVI44kHz;		// determine when we need to mix and write another block
+	int						gameMsec;
+	int						game44kHz;
+	int						pause44kHz;
+	int						lastAVI44kHz;		// determine when we need to mix and write another block
 
-		idList<idSoundEmitterLocal *>emitters;
+	idList<idSoundEmitterLocal *>emitters;
 
-		idSoundFade				soundClassFade[SOUND_MAX_CLASSES];	// for global sound fading
+	idSoundFade				soundClassFade[SOUND_MAX_CLASSES];	// for global sound fading
 
-		// avi stuff
-		idFile 				*fpa[6];
-		idStr					aviDemoPath;
-		idStr					aviDemoName;
+	// avi stuff
+	idFile *				fpa[6];
+	idStr					aviDemoPath;
+	idStr					aviDemoName;
 
-		idSoundEmitterLocal 	*localSound;		// just for playShaderDirectly()
+	idSoundEmitterLocal *	localSound;		// just for playShaderDirectly()
 
-		bool					slowmoActive;
-		float					slowmoSpeed;
-		bool					enviroSuitActive;
+	bool					slowmoActive;
+	float					slowmoSpeed;
+	bool					enviroSuitActive;
 };
 
 /*
@@ -870,44 +713,43 @@ class idSoundSystemLocal : public idSoundSystem
 			isInitialized = false;
 		}
 
-		// all non-hardware initialization
-		virtual void			Init(void);
+	// all non-hardware initialization
+	virtual void			Init( void );
 
-		// shutdown routine
-		virtual	void			Shutdown(void);
-		virtual void			ClearBuffer(void);
+	// shutdown routine
+	virtual	void			Shutdown( void );
 
-		// sound is attached to the window, and must be recreated when the window is changed
-		virtual bool			ShutdownHW(void);
-		virtual bool			InitHW(void);
+	// sound is attached to the window, and must be recreated when the window is changed
+	virtual bool			ShutdownHW( void );
+	virtual bool			InitHW( void );
 
-		// async loop, called at 60Hz
-		virtual int				AsyncUpdate(int time);
-		// async loop, when the sound driver uses a write strategy
-		virtual int				AsyncUpdateWrite(int time);
-		// direct mixing called from the sound driver thread for OSes that support it
-		virtual int				AsyncMix(int soundTime, float *mixBuffer);
+	// async loop, called at 60Hz
+	virtual int				AsyncUpdate( int time );
+	// async loop, when the sound driver uses a write strategy
+	virtual int				AsyncUpdateWrite( int time );
+	// direct mixing called from the sound driver thread for OSes that support it
+	virtual int				AsyncMix( int soundTime, float *mixBuffer );
 
-		virtual void			SetMute(bool mute);
+	virtual void			SetMute( bool mute );
 
-		virtual cinData_t		ImageForTime(const int milliseconds, const bool waveform);
+	virtual cinData_t		ImageForTime( const int milliseconds, const bool waveform );
 
-		int						GetSoundDecoderInfo(int index, soundDecoderInfo_t &decoderInfo);
+	int						GetSoundDecoderInfo( int index, soundDecoderInfo_t &decoderInfo );
 
-		// if rw == NULL, no portal occlusion or rendered debugging is available
-		virtual idSoundWorld	*AllocSoundWorld(idRenderWorld *rw);
+	// if rw == NULL, no portal occlusion or rendered debugging is available
+	virtual idSoundWorld	*AllocSoundWorld( idRenderWorld *rw );
 
-		// specifying NULL will cause silence to be played
-		virtual void			SetPlayingSoundWorld(idSoundWorld *soundWorld);
+	// specifying NULL will cause silence to be played
+	virtual void			SetPlayingSoundWorld( idSoundWorld *soundWorld );
 
-		// some tools, like the sound dialog, may be used in both the game and the editor
-		// This can return NULL, so check!
-		virtual idSoundWorld	*GetPlayingSoundWorld(void);
+	// some tools, like the sound dialog, may be used in both the game and the editor
+	// This can return NULL, so check!
+	virtual idSoundWorld	*GetPlayingSoundWorld( void );
 
-		virtual	void			BeginLevelLoad(void);
-		virtual	void			EndLevelLoad(const char *mapString);
+	virtual	void			BeginLevelLoad( void );
+	virtual	void			EndLevelLoad( const char *mapString );
 
-		virtual void			PrintMemInfo(MemInfo_t *mi);
+	virtual void			PrintMemInfo( MemInfo_t *mi );
 
 		virtual int				IsEAXAvailable(void);
 
@@ -1019,20 +861,19 @@ class idSoundSystemLocal : public idSoundSystem
 
 	//-------------------------
 
-	int						GetCurrent44kHzTime(void) const;
-	float					dB2Scale(const float val) const;
-	int						SamplesToMilliseconds(int samples) const;
-	int						MillisecondsToSamples(int ms) const;
+	int						GetCurrent44kHzTime( void ) const;
+	float					dB2Scale( const float val ) const;
+	int						SamplesToMilliseconds( int samples ) const;
+	int						MillisecondsToSamples( int ms ) const;
 
-	void					DoEnviroSuit(float *samples, int numSamples, int numSpeakers);
+	void					DoEnviroSuit( float* samples, int numSamples, int numSpeakers );
 
-	ALuint					AllocOpenALSource(idSoundChannel *chan, bool looping, bool stereo);
-	void					FreeOpenALSource(ALuint handle);
+	ALuint					AllocOpenALSource( idSoundChannel *chan, bool looping, bool stereo );
+	void					FreeOpenALSource( ALuint handle );
 
-	idAudioHardware 		*snd_audio_hw;
-	idSoundCache 			*soundCache;
+	idSoundCache *			soundCache;
 
-	idSoundWorldLocal 		*currentSoundWorld;	// the one to mix each async tic
+	idSoundWorldLocal *		currentSoundWorld;	// the one to mix each async tic
 
 	int						olddwCurrentWritePos;	// statistics
 	int						buffers;				// statistics
@@ -1040,8 +881,8 @@ class idSoundSystemLocal : public idSoundSystem
 
 	unsigned int			nextWriteBlock;
 
-	float 					realAccum[6*MIXBUFFER_SAMPLES+16];
-	float 					*finalMixBuffer;			// points inside realAccum at a 16 byte aligned boundary
+	float					realAccum[6*MIXBUFFER_SAMPLES+16];
+	float *					finalMixBuffer;			// points inside realAccum at a 16 byte aligned boundary
 
 	bool					isInitialized;
 	bool					muted;
@@ -1052,51 +893,28 @@ class idSoundSystemLocal : public idSoundSystem
 	int						meterTops[256];
 	int						meterTopsTime[256];
 
-	dword 					*graph;
+	dword *					graph;
 
 	float					volumesDB[1200];		// dB to float volume conversion
 
-	idList<SoundFX *>		fxList;
+	idList<SoundFX*>		fxList;
 
-#ifdef _OPENAL
 	ALCdevice				*openalDevice;
 	ALCcontext				*openalContext;
 	ALsizei					openalSourceCount;
 	openalSource_t			openalSources[256];
-
-#ifdef _OPENAL_EFX
-	LPALGENEFFECTS			alGenEffects;
-	LPALDELETEEFFECTS		alDeleteEffects;
-	LPALISEFFECT			alIsEffect;
-	LPALEFFECTI				alEffecti;
-	LPALEFFECTF				alEffectf;
-	LPALEFFECTFV			alEffectfv;
-	LPALGENFILTERS			alGenFilters;
-	LPALDELETEFILTERS		alDeleteFilters;
-	LPALISFILTER			alIsFilter;
-	LPALFILTERI				alFilteri;
-	LPALFILTERF				alFilterf;
-	LPALGENAUXILIARYEFFECTSLOTS		alGenAuxiliaryEffectSlots;
-	LPALDELETEAUXILIARYEFFECTSLOTS	alDeleteAuxiliaryEffectSlots;
-	LPALISAUXILIARYEFFECTSLOT		alIsAuxiliaryEffectSlot;
-	LPALAUXILIARYEFFECTSLOTI		alAuxiliaryEffectSloti;
-	LPALAUXILIARYEFFECTSLOTF		alAuxiliaryEffectSlotf;
-
-	static idCVar s_alReverbGain;
-#else
+#if ID_OPENAL_EAX
 	EAXSet					alEAXSet;
 	EAXGet					alEAXGet;
 	EAXSetBufferMode		alEAXSetBufferMode;
 	EAXGetBufferMode		alEAXGetBufferMode;
 #endif
 	idEFXFile				EFXDatabase;
-#endif
 	bool					efxloaded;
-	// latches
-	static bool				useOpenAL;
-	static bool				useEAXReverb; //k: useEFXReverb if using EFX
-	// mark available during initialization, or through an explicit test
-	static int				EAXAvailable; //k: EFXAvailable if using EFX
+							// latches
+	static bool				useEAXReverb;
+							// mark available during initialization, or through an explicit test
+	static int				EAXAvailable;
 
 
 	static idCVar			s_noSound;
@@ -1147,104 +965,105 @@ extern	idSoundSystemLocal	soundSystemLocal;
 
 
 /*
-   ===================================================================================
+===================================================================================
 
-   This class holds the actual wavefile bitmap, size, and info.
+  This class holds the actual wavefile bitmap, size, and info.
 
-   ===================================================================================
-   */
+===================================================================================
+*/
 
 const int SCACHE_SIZE = MIXBUFFER_SAMPLES*20;	// 1/2 of a second (aroundabout)
 
-class idSoundSample
-{
-	public:
-		idSoundSample();
-		~idSoundSample();
+class idSoundSample {
+public:
+							idSoundSample();
+							~idSoundSample();
 
-		idStr					name;						// name of the sample file
-		ID_TIME_T		 			timestamp;					// the most recent of all images used in creation, for reloadImages command
+	idStr					name;						// name of the sample file
+	ID_TIME_T					timestamp;					// the most recent of all images used in creation, for reloadImages command
 
-		waveformatex_t			objectInfo;					// what are we caching
-		int						objectSize;					// size of waveform in samples, excludes the header
-		int						objectMemSize;				// object size in memory
-		byte 					*nonCacheData;				// if it's not cached
-		byte 					*amplitudeData;				// precomputed min,max amplitude pairs
-		ALuint					openalBuffer;				// openal buffer
-		bool					hardwareBuffer;
-		bool					defaultSound;
-		bool					onDemand;
-		bool					purged;
-		bool					levelLoadReferenced;		// so we can tell which samples aren't needed any more
+	waveformatex_t			objectInfo;					// what are we caching
+	int						objectSize;					// size of waveform in samples, excludes the header
+	int						objectMemSize;				// object size in memory
+	byte *					nonCacheData;				// if it's not cached
+	byte *					amplitudeData;				// precomputed min,max amplitude pairs
+	ALuint					openalBuffer;				// openal buffer
+	bool					hardwareBuffer;
+	bool					defaultSound;
+	bool					onDemand;
+	bool					purged;
+	bool					levelLoadReferenced;		// so we can tell which samples aren't needed any more
 
-		int						LengthIn44kHzSamples() const;
-		ID_TIME_T		 			GetNewTimeStamp(void) const;
-		void					MakeDefault();				// turns it into a beep
-		void					Load();						// loads the current sound based on name
-		void					Reload(bool force);		// reloads if timestamp has changed, or always if force
-		void					PurgeSoundSample();			// frees all data
-		void					CheckForDownSample();		// down sample if required
-		bool					FetchFromCache(int offset, const byte **output, int *position, int *size, const bool allowIO);
+	int						LengthIn44kHzSamples() const;
+	ID_TIME_T					GetNewTimeStamp( void ) const;
+	void					MakeDefault();				// turns it into a beep
+	void					Load();						// loads the current sound based on name
+	void					Reload( bool force );		// reloads if timestamp has changed, or always if force
+	void					PurgeSoundSample();			// frees all data
+	void					CheckForDownSample();		// down sample if required
+	bool					FetchFromCache( int offset, const byte **output, int *position, int *size, const bool allowIO );
 };
 
 
 /*
-   ===================================================================================
+===================================================================================
 
-   Sound sample decoder.
+  Sound sample decoder.
 
-   ===================================================================================
-   */
+===================================================================================
+*/
 
-class idSampleDecoder
-{
-	public:
-		static void				Init(void);
-		static void				Shutdown(void);
-		static idSampleDecoder *Alloc(void);
-		static void				Free(idSampleDecoder *decoder);
-		static int				GetNumUsedBlocks(void);
-		static int				GetUsedBlockMemory(void);
+class idSampleDecoder {
+public:
+	static void				Init( void );
+	static void				Shutdown( void );
+	static idSampleDecoder *Alloc( void );
+	static void				Free( idSampleDecoder *decoder );
+	static int				GetNumUsedBlocks( void );
+	static int				GetUsedBlockMemory( void );
 
-		virtual					~idSampleDecoder(void) {}
-		virtual void			Decode(idSoundSample *sample, int sampleOffset44k, int sampleCount44k, float *dest) = 0;
-		virtual void			ClearDecoder(void) = 0;
-		virtual idSoundSample 	*GetSample(void) const = 0;
-		virtual int				GetLastDecodeTime(void) const = 0;
+	virtual					~idSampleDecoder( void ) {}
+	virtual void			Decode( idSoundSample *sample, int sampleOffset44k, int sampleCount44k, float *dest ) = 0;
+	virtual void			ClearDecoder( void ) = 0;
+	virtual idSoundSample *	GetSample( void ) const = 0;
+	virtual int				GetLastDecodeTime( void ) const = 0;
 };
 
 
 /*
-   ===================================================================================
+===================================================================================
 
-   The actual sound cache.
+  The actual sound cache.
 
-   ===================================================================================
-   */
+===================================================================================
+*/
 
-class idSoundCache
-{
-	public:
-		idSoundCache();
-		~idSoundCache();
+class idSoundCache {
+public:
+							idSoundCache();
+							~idSoundCache();
 
-		idSoundSample 			*FindSound(const idStr &fname, bool loadOnDemandOnly);
+	idSoundSample *			FindSound( const idStr &fname, bool loadOnDemandOnly );
 
-		const int				GetNumObjects(void) {
-			return listCache.Num();
-		}
-		const idSoundSample 	*GetObject(const int index) const;
+	const int				GetNumObjects( void ) { return listCache.Num(); }
+	const idSoundSample *	GetObject( const int index ) const;
 
-		void					ReloadSounds(bool force);
+	void					ReloadSounds( bool force );
 
-		void					BeginLevelLoad();
-		void					EndLevelLoad();
+	void					BeginLevelLoad();
+	void					EndLevelLoad();
 
-		void					PrintMemInfo(MemInfo_t *mi);
+	void					PrintMemInfo( MemInfo_t *mi );
 
-	private:
-		bool					insideLevelLoad;
-		idList<idSoundSample *>	listCache;
+private:
+	bool					insideLevelLoad;
+	idList<idSoundSample*>	listCache;
 };
+
+#if EFX_VERBOSE
+#define EFXprintf(...) do { common->Printf(__VA_ARGS__); } while (false)
+#else
+#define EFXprintf(...) do { } while (false)
+#endif
 
 #endif /* !__SND_LOCAL_H__ */

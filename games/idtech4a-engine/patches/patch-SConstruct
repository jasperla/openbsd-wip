Index: SConstruct
--- SConstruct.orig
+++ SConstruct
@@ -12,8 +12,8 @@ import scons_utils
 conf_filename='site.conf'
 # choose configuration variables which should be saved between runs
 # ( we handle all those as strings )
-serialized=['CC', 'CXX', 'JOBS', 'BUILD', 'IDNET_HOST', 'DEDICATED',
-	'DEBUG_MEMORY', 'LIBC_MALLOC', 'ID_NOLANADDRESS', 'ID_MCHECK', 'ALSA',
+serialized=['CC', 'CXX', 'X86', 'JOBS', 'BUILD', 'IDNET_HOST', 'DEDICATED',
+	'DEBUG_MEMORY', 'LIBC_MALLOC', 'ID_NOLANADDRESS', 'ID_MCHECK',
 	'TARGET_CORE', 'TARGET_GAME', 'TARGET_D3XP', 'TARGET_MONO', 'TARGET_DEMO', 'NOCURL',
 	'TARGET_CDOOM',
 	'TARGET_D3LE',
@@ -29,6 +29,13 @@ serialized=['CC', 'CXX', 'JOBS', 'BUILD', 'IDNET_HOST'
 	'MULTITHREAD', 'OPENSLES'
     ]
 
+
+# global build mode ------------------------------
+
+g_sdk = not os.path.exists( 'sys/scons/SConscript.core' )
+
+# ------------------------------------------------
+
 # help -------------------------------------------
 
 help_string = """
@@ -102,12 +109,18 @@ BUILD_GAMEPAK (default 0)
 BASEFLAGS (default '')
 	Add compile flags
 
-NOCONF (default 0, not saved)
-	ignore site configuration and use defaults + command line only
+X86 (default 0)
+	cross compile for x86 (only applicable on x86_64)
 	
 SILENT ( default 0, saved )
 	hide the compiler output, unless error
 
+NOCONF (default 0, not saved)
+	ignore site configuration and use defaults + command line only
+"""
+
+if ( not g_sdk ):
+	help_string += """
 DEDICATED (default 0)
 	Control regular / dedicated type of build:
 	0 - client
@@ -155,9 +168,12 @@ ID_MCHECK (default 2)
 	note that Doom has it's own block allocator/checking
 	this should not be considered a replacement, but an additional tool
 
-ALSA (default 1)
-	enable ALSA sound backend support
-	
+SETUP (default 0, not saved)
+	build a setup. implies release build
+
+SDK (default 0, not saved)
+	build an SDK release
+
 NOCURL (default 0)
 	set to 1 to disable usage of libcurl and http/ftp downloads feature
 """
@@ -175,18 +191,27 @@ EnsureSConsVersion( 0, 96 )
 # system detection -------------------------------
 
 # CPU type
-cpu = commands.getoutput('uname -m')
-exp = re.compile('i?86')
-if exp.match(cpu):
-	cpu = 'x86'
-else:
-	if (commands.getoutput('uname -p') == 'powerpc'):
-		cpu = 'ppc'
-g_os = 'Linux'
+g_cpu = ''
 
-if ARGUMENTS.has_key( 'ARCH' ):
-	cpu = ARGUMENTS['ARCH']
+uname = commands.getoutput('uname -m')
+if uname == 'x86_64':
+	g_cpu = 'x86_64'
 
+if len(g_cpu) < 1:
+	exp = re.compile('.*i?86.*')
+	if exp.match(uname):
+		g_cpu = 'x86'
+
+if len(g_cpu) < 1:
+	uname = commands.getoutput('uname -p')
+	if (uname == 'powerpc'):
+		g_cpu = 'ppc'
+
+if len(g_cpu) < 1:
+		g_cpu = 'cpu'
+
+g_os = commands.getoutput('uname -s')
+
 # end system detection ---------------------------
 
 # default settings -------------------------------
@@ -195,6 +220,7 @@ CC = 'gcc'
 CXX = 'g++'
 JOBS = '16'
 BUILD = 'debug'
+X86 = '0'
 DEDICATED = '0'
 TARGET_CORE = '1'
 TARGET_GAME = '1'
@@ -218,7 +244,8 @@ LIBC_MALLOC = '1'
 ID_NOLANADDRESS = '0'
 ID_MCHECK = '2'
 BUILD_ROOT = 'build'
-ALSA = '1'
+SETUP = '0'
+SDK = '0'
 NOCONF = '0'
 NOCURL = '0'
 BUILD_GAMEPAK = '0'
@@ -271,6 +298,21 @@ if ( not ARGUMENTS.has_key( 'NOCONF' ) or ARGUMENTS['N
 
 # end save site configuration ------------------
 
+# configuration rules --------------------------
+
+if ( SETUP != '0' ):
+	DEDICATED	= '2'
+	BUILD		= 'release'
+
+if ( g_sdk or SDK != '0' ):
+	TARGET_CORE = '0'
+	TARGET_GAME = '1'
+	TARGET_D3XP = '1'
+	TARGET_MONO = '0'
+	TARGET_DEMO = '0'
+
+# end configuration rules ----------------------
+
 # general configuration, target selection --------
 
 g_build = BUILD_ROOT + '/' + BUILD
@@ -297,15 +339,31 @@ CORECPPPATH = [ ]
 CORELIBPATH = [ ]
 CORECPPFLAGS = [ ]
 GAMECPPFLAGS = [ ]
-BASELINKFLAGS = [ '-Wl,--no-undefined' ]
-CORELINKFLAGS = [ '-Wl,--no-undefined' ]
-#//k BASELINKFLAGS = [ '-Wl,--no-undefined', '-static-libstdc++' ]
-#//k CORELINKFLAGS = [ '-Wl,--no-undefined', '-static-libstdc++' ]
+BASELINKFLAGS = [ ]
+CORELINKFLAGS = [ ]
 
 # for release build, further optimisations that may not work on all files
 OPTCPPFLAGS = [ ]
 
-BASECPPFLAGS.append( BASEFLAGS.split() )
+if (g_cpu == 'x86_64' and X86 == '1'):
+	print('cross compiling for x86')
+	g_cpu = 'x86'
+	BASECPPFLAGS.append('-m32')
+	BASELINKFLAGS.append('-m32')
+
+g_build = '%s/%s-%s' % (BUILD_ROOT, g_cpu, BUILD)
+
+SConsignFile( g_build + '/scons.signatures' )
+
+if ( DEBUG_MEMORY != '0' ):
+	g_build += '-debugmem'
+
+if ( LIBC_MALLOC != '1' ):
+	g_build += '-nolibcmalloc'
+
+LINK = CXX
+
+BASECPPFLAGS.extend( BASEFLAGS.split(' ') )
 BASECPPFLAGS.append( '-pipe' )
 # warn all
 BASECPPFLAGS.append( '-Wall' ) # -w
@@ -328,6 +386,13 @@ if ( g_os == 'Linux' ):
 	#BASECPPFLAGS.append('-D__arm__')
 # //k
 
+if ( "BSD" in g_os ):
+	BASECPPFLAGS.append( '-I/usr/local/include' )
+	BASELINKFLAGS.append('-L/usr/local/lib')
+
+if ( g_sdk or SDK != '0' ):
+	BASECPPFLAGS.append( '-D_D3SDK' )
+	
 if ( TARGET_ANDROID == '1' ):
 	BASECPPFLAGS.append( '-D__ANDROID__')
 	g_os = 'Android'
@@ -353,6 +418,10 @@ elif ( BUILD == 'release' ):
 		OPTCPPFLAGS = [ '-O3', '-Wl,--no-undefined', '-ffast-math', '-fno-unsafe-math-optimizations', '-fomit-frame-pointer' ]
 	else:
 		OPTCPPFLAGS = [ '-O3', '-march=native', '-ffast-math', '-fno-unsafe-math-optimizations', '-fomit-frame-pointer' ]
+
+	if (g_cpu == 'x86'):
+		OPTCPPFLAGS.append('-march=pentium3')
+		
 	if ( ID_MCHECK == '0' ):
 		ID_MCHECK = '2'
 else:
@@ -373,7 +442,12 @@ if ( ID_NOLANADDRESS != '0' ):
 	
 if ( ID_MCHECK == '1' ):
 	BASECPPFLAGS.append( '-DID_MCHECK' )
-	
+
+# TODO fix these warnings
+BASECPPFLAGS.append('-Wno-sign-compare')
+BASECPPFLAGS.append('-Wno-switch')
+BASECPPFLAGS.append('-Wno-format-security')
+
 # create the build environements
 g_base_env = Environment( ENV = os.environ, CC = CC, CXX = CXX, LINK = LINK, CPPFLAGS = BASECPPFLAGS, LINKFLAGS = BASELINKFLAGS, CPPPATH = CORECPPPATH, LIBPATH = CORELIBPATH, NDK = NDK, MULTITHREAD = MULTITHREAD, OPENSLES = OPENSLES )
 scons_utils.SetupUtils( g_base_env ) 
@@ -430,7 +504,7 @@ local_humanhead = 0
 # OpenGL
 local_opengl = 0
 
-GLOBALS = 'g_env g_env_noopt g_game_env g_os ID_MCHECK ALSA idlib_objects game_objects local_dedicated local_gamedll local_demo local_idlibpic local_curl local_d3xp local_cdoom local_d3le local_rivensin local_hardcorps local_quake4 local_raven local_prey local_humanhead local_opengl OPTCPPFLAGS NDK MULTITHREAD OPENSLES'
+GLOBALS = 'g_env g_env_noopt g_game_env g_os g_cpu g_build ID_MCHECK idlib_objects game_objects local_dedicated local_gamedll local_demo local_idlibpic local_curl local_d3xp local_cdoom local_d3le local_rivensin local_hardcorps local_quake4 local_raven local_prey local_humanhead local_opengl OPTCPPFLAGS NDK MULTITHREAD OPENSLES'
 
 # end general configuration ----------------------
 
